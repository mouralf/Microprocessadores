C51 COMPILER V9.60.0.0   16X2                                                              08/21/2021 18:37:51 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE 16X2
OBJECT MODULE PLACED IN .\Objects\16x2.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE 16x2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\16x2
                    -.lst) TABS(2) OBJECT(.\Objects\16x2.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          sbit DB7 = P1^7;
   4          sbit DB6 = P1^6;
   5          sbit DB5 = P1^5;
   6          sbit DB4 = P1^4;
   7          sbit RS = P1^3;
   8          sbit E = P1^2;
   9          
  10          sbit clear = P2^4;
  11          sbit ret = P2^5;          
  12          sbit left = P2^6;
  13          sbit right = P2^7;
  14          
  15          void returnHome(void);
  16          void entryModeSet(bit id, bit s);
  17          void displayOnOffControl(bit display, bit cursor, bit blinking);
  18          void cursorOrDisplayShift(bit sc, bit rl);
  19          void functionSet(void);
  20          void setDdRamAddress(char address);
  21          
  22          void sendChar(char c);
  23          void sendString(char* str);
  24          bit getBit(char c, char bitNumber);
  25          void delay(void);
  26          
  27          void main(void) {
  28   1      
  29   1        functionSet();
  30   1        entryModeSet(1, 0); // increment and no shift
  31   1        displayOnOffControl(1, 1, 1); // display on, cursor on and blinking on
  32   1        sendString("EdSim51 LCD Module Simulation");
  33   1        setDdRamAddress(0x40); // set address to start of second line
  34   1        sendString("Based on Hitachi HD44780");
  35   1      
  36   1        // The program can be controlled via some of the switches on port 2.
  37   1        // If switch 5 is closed the cursor returns home (address 0).
  38   1        // Otherwise, switches 6 and 7 are read - if both switches are open or both switches 
  39   1        //      are closed, the display does not shift.
  40   1        // If switch 7 is closed, continuously shift left.
  41   1        // If switch 6 is closed, continuously shift right.
  42   1        while (1) {
  43   2          if (ret == 0) {
  44   3            returnHome();
  45   3          }
  46   2          else {  
  47   3            if (left == 0 && right == 1) {
  48   4              cursorOrDisplayShift(1, 0); // shift display left
  49   4            }
  50   3            else if (left == 1 && right == 0) {
  51   4              cursorOrDisplayShift(1, 1); // shift display right
  52   4            } 
  53   3          } 
  54   2        }
C51 COMPILER V9.60.0.0   16X2                                                              08/21/2021 18:37:51 PAGE 2   

  55   1      }
  56          
  57          // LCD Module instructions -------------------------------------------
  58          // To understand why the pins are being set to the particular values in the functions
  59          // below, see the instruction set.
  60          // A full explanation of the LCD Module: HD44780.pdf
  61          
  62          void returnHome(void) {
  63   1        RS = 0;
  64   1        DB7 = 0;
  65   1        DB6 = 0;
  66   1        DB5 = 0;
  67   1        DB4 = 0;
  68   1        E = 1;
  69   1        E = 0;
  70   1        DB5 = 1;
  71   1        E = 1;
  72   1        E = 0;
  73   1        delay();
  74   1      } 
  75          
  76          void entryModeSet(bit id, bit s) {
  77   1        RS = 0;
  78   1        DB7 = 0;
  79   1        DB6 = 0;
  80   1        DB5 = 0;
  81   1        DB4 = 0;
  82   1        E = 1;
  83   1        E = 0;
  84   1        DB6 = 1;
  85   1        DB5 = id;
  86   1        DB4 = s;
  87   1        E = 1;
  88   1        E = 0;
  89   1        delay();
  90   1      }
  91          
  92          void displayOnOffControl(bit display, bit cursor, bit blinking) {
  93   1        DB7 = 0;
  94   1        DB6 = 0;
  95   1        DB5 = 0;
  96   1        DB4 = 0;
  97   1        E = 1;
  98   1        E = 0;
  99   1        DB7 = 1;
 100   1        DB6 = display;
 101   1        DB5 = cursor;
 102   1        DB4 = blinking;
 103   1        E = 1;
 104   1        E = 0;
 105   1        delay();
 106   1      }
 107          
 108          void cursorOrDisplayShift(bit sc, bit rl) {
 109   1        RS = 0;
 110   1        DB7 = 0;
 111   1        DB6 = 0;
 112   1        DB5 = 0;
 113   1        DB4 = 1;
 114   1        E = 1;
 115   1        E = 0;
 116   1        DB7 = sc;
C51 COMPILER V9.60.0.0   16X2                                                              08/21/2021 18:37:51 PAGE 3   

 117   1        DB6 = rl;
 118   1        E = 1;
 119   1        E = 0;
 120   1        delay();
 121   1      }
 122          
 123          void functionSet(void) {
 124   1        // The high nibble for the function set is actually sent twice. Why? See 4-bit operation
 125   1        // on pages 39 and 42 of HD44780.pdf.
 126   1        DB7 = 0;
 127   1        DB6 = 0;
 128   1        DB5 = 1;
 129   1        DB4 = 0;
 130   1        RS = 0;
 131   1        E = 1;
 132   1        E = 0;
 133   1        delay();
 134   1        E = 1;
 135   1        E = 0;
 136   1        DB7 = 1;
 137   1        E = 1;
 138   1        E = 0;
 139   1        delay();
 140   1      }
 141          
 142          void setDdRamAddress(char address) {
 143   1        RS = 0;
 144   1        DB7 = 1;
 145   1        DB6 = getBit(address, 6);
 146   1        DB5 = getBit(address, 5);
 147   1        DB4 = getBit(address, 4);
 148   1        E = 1;
 149   1        E = 0;
 150   1        DB7 = getBit(address, 3);
 151   1        DB6 = getBit(address, 2);
 152   1        DB5 = getBit(address, 1);
 153   1        DB4 = getBit(address, 0);
 154   1        E = 1;
 155   1        E = 0;
 156   1        delay();
 157   1      }
 158          
 159          void sendChar(char c) {
 160   1        DB7 = getBit(c, 7);
 161   1        DB6 = getBit(c, 6);
 162   1        DB5 = getBit(c, 5);
 163   1        DB4 = getBit(c, 4);
 164   1        RS = 1;
 165   1        E = 1;
 166   1        E = 0;
 167   1        DB7 = getBit(c, 3);
 168   1        DB6 = getBit(c, 2);
 169   1        DB5 = getBit(c, 1);
 170   1        DB4 = getBit(c, 0);
 171   1        E = 1;
 172   1        E = 0;
 173   1        delay();
 174   1      }
 175          
 176          // -- End of LCD Module instructions
 177          // --------------------------------------------------------------------
 178          
C51 COMPILER V9.60.0.0   16X2                                                              08/21/2021 18:37:51 PAGE 4   

 179          void sendString(char* str) {
 180   1        int index = 0;
 181   1        while (str[index] != 0) {
 182   2          sendChar(str[index]);
 183   2          index++;
 184   2        }
 185   1      }
 186          
 187          bit getBit(char c, char bitNumber) {
 188   1        return (c >> bitNumber) & 1;
 189   1      }
 190          
 191          void delay(void) {
 192   1        char c;
 193   1        for (c = 0; c < 50; c++);
 194   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    475    ----
   CONSTANT SIZE    =     55    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       7
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
