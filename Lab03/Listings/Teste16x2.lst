C51 COMPILER V9.60.0.0   TESTE16X2                                                         08/21/2021 20:55:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TESTE16X2
OBJECT MODULE PLACED IN .\Objects\Teste16x2.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Teste16x2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\Teste16x2.lst) TABS(2) OBJECT(.\Objects\Teste16x2.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          sbit DB7 = P1^7;
   4          sbit DB6 = P1^6;
   5          sbit DB5 = P1^5;
   6          sbit DB4 = P1^4;
   7          sbit RS = P1^3;
   8          sbit E = P1^2;
   9          
  10          sbit clear = P2^4;
  11          sbit ret = P2^5;          
  12          sbit left = P2^6;
  13          sbit right = P2^7;
  14          
  15          void returnHome(void);
  16          void entryModeSet(bit id, bit s);
  17          void displayOnOffControl(bit display, bit cursor, bit blinking);
  18          void cursorOrDisplayShift(bit sc, bit rl);
  19          void functionSet(void);
  20          void setDdRamAddress(char address);
  21          
  22          void sendChar(char c);
  23          void sendString(char* str);
  24          bit getBit(char c, char bitNumber);
  25          void delay(void);
  26          
  27          char code LISTA[] = {
  28          'N','Y','A','H',' ','H','U','S','T','O','N',0, 7, 90, 9, 11, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0,  //7,90; 9,11; 
             -0,0; 0,0; 0, 0; 0,0
  29          'J','A','G','G','E','R',' ','E','A','T','O','N',0, 8, 20, 9, 5, 0, 0, 8, 70,9,40, 0, 0, 0, 0, //8,20; 9,05
             -; 0,0; 8,70; 9,40; 0,0; 0,0
  30          'G','U','S','T','A','V','O',' ','R','I','B','E','I','R','O',0, 7, 23, 5, 82, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
             -  //7,23; 5,82; 0,0; 0,0; 0,0; 0,0; 2,0
  31          'K','E','L','V','I','N',' ','H','O','E','F','L','E','R',0, 8, 98, 8, 84, 8, 99, 0, 0, 0, 0, 7,58, 9,34, //
             -8,98; 8,84; 8,99; 0,0; 0,0; 7,58; 9,34
  32          'V','I','C','E','N','T',' ','M','I','L','O','U',0, 7, 87, 5, 54, 9, 23, 0, 0, 8, 34, 0,0, 8,70, //7,87; 5,
             -54; 9,23; 0,0; 8,34; 0,0; 8,70
  33          'A','N','G','E','L','O',' ','N','A','R','V','A','E','Z',0, 7, 1, 6, 9, 9, 0, 0, 0, 0, 0, 8,65, 8,21, //7,0
             -1; 6,89; 9,00; 0,0; 0,0; 8,65; 8,21
  34          'A','U','R','E','L','I','A','N',' ','G','R','A','U','D',0, 4, 21, 7, 20, 8, 68, 0, 0, 9, 0, 0, 0, 0, 0, //
             -4,21; 7,20; 8,68; 0,0; 9,0; 0,0;
  35          'Y','U','T','O',' ','H','O','R','I','G','A','M','E',0, 8, 02, 6, 77, 9, 3, 0, 0, 9, 35, 9, 50, 9,30 //8,02
             -; 6,77; 9,03; 0,0; 9,35; 9,50; 9,30
  36          };
  37          
  38          void main(void) {
  39   1        char teste[5] = {'p', 'e', 'n', 'i', 's'};
  40   1        unsigned char j = 0, letrasNome;
  41   1        unsigned int notasFinais[8] = {3718, 3615};
  42   1        char code LISTA [] = {'N','Y','A','H',' '};
  43   1        
  44   1        functionSet();
  45   1        entryModeSet(1, 0); // increment and no shift
  46   1        displayOnOffControl(1, 1, 1); // display on, cursor on and blinking on
C51 COMPILER V9.60.0.0   TESTE16X2                                                         08/21/2021 20:55:49 PAGE 2   

  47   1        
  48   1        letrasNome = 0;
  49   1            //pega o nome de cada competidor do podio
  50   1        while (LISTA[letrasNome] != ' '){
  51   2          sendChar(LISTA[letrasNome]); //armazena em RESULT o nome do competidor (ordem de podio)
  52   2          letrasNome++;
  53   2      }
  54   1            sendChar(' ');
  55   1        for (j = 0; j<2; j++){
  56   2            sendChar((notasFinais[j]/1000)+48); //armazena em RESULT o dígito da dezena
  57   2            sendChar(((notasFinais[j]/100)%10)+48); //armazena em RESULT o dígito da unidade
  58   2            sendChar(',');
  59   2            sendChar(((notasFinais[j]-(notasFinais[j]/100)*100)/10)+48); ////armazena em RESULT o dígito da dezena 
             -após a vírgula
  60   2            sendChar (((notasFinais[j]-(notasFinais[j]/100)*100)%10)+48); //armazena em RESULT o dígito da unidade 
             -após a virgula
  61   2            setDdRamAddress(0x40); // set address to start of second line
  62   2      
  63   2        }
  64   1        
  65   1      
  66   1        
  67   1      
  68   1        // The program can be controlled via some of the switches on port 2.
  69   1        // If switch 5 is closed the cursor returns home (address 0).
  70   1        // Otherwise, switches 6 and 7 are read - if both switches are open or both switches 
  71   1        //      are closed, the display does not shift.
  72   1        // If switch 7 is closed, continuously shift left.
  73   1        // If switch 6 is closed, continuously shift right.
  74   1        while (1) {
  75   2          if (ret == 0) {
  76   3            returnHome();
  77   3          }
  78   2          else {  
  79   3            if (left == 0 && right == 1) {
  80   4              cursorOrDisplayShift(1, 0); // shift display left
  81   4            }
  82   3            else if (left == 1 && right == 0) {
  83   4              cursorOrDisplayShift(1, 1); // shift display right
  84   4            } 
  85   3          } 
  86   2        }
  87   1      }
  88          
  89          // LCD Module instructions -------------------------------------------
  90          // To understand why the pins are being set to the particular values in the functions
  91          // below, see the instruction set.
  92          // A full explanation of the LCD Module: HD44780.pdf
  93          
  94          void returnHome(void) {
  95   1        RS = 0;
  96   1        DB7 = 0;
  97   1        DB6 = 0;
  98   1        DB5 = 0;
  99   1        DB4 = 0;
 100   1        E = 1;
 101   1        E = 0;
 102   1        DB5 = 1;
 103   1        E = 1;
 104   1        E = 0;
 105   1        delay();
 106   1      } 
C51 COMPILER V9.60.0.0   TESTE16X2                                                         08/21/2021 20:55:49 PAGE 3   

 107          
 108          void entryModeSet(bit id, bit s) {
 109   1        RS = 0;
 110   1        DB7 = 0;
 111   1        DB6 = 0;
 112   1        DB5 = 0;
 113   1        DB4 = 0;
 114   1        E = 1;
 115   1        E = 0;
 116   1        DB6 = 1;
 117   1        DB5 = id;
 118   1        DB4 = s;
 119   1        E = 1;
 120   1        E = 0;
 121   1        delay();
 122   1      }
 123          
 124          void displayOnOffControl(bit display, bit cursor, bit blinking) {
 125   1        DB7 = 0;
 126   1        DB6 = 0;
 127   1        DB5 = 0;
 128   1        DB4 = 0;
 129   1        E = 1;
 130   1        E = 0;
 131   1        DB7 = 1;
 132   1        DB6 = display;
 133   1        DB5 = cursor;
 134   1        DB4 = blinking;
 135   1        E = 1;
 136   1        E = 0;
 137   1        delay();
 138   1      }
 139          
 140          void cursorOrDisplayShift(bit sc, bit rl) {
 141   1        RS = 0;
 142   1        DB7 = 0;
 143   1        DB6 = 0;
 144   1        DB5 = 0;
 145   1        DB4 = 1;
 146   1        E = 1;
 147   1        E = 0;
 148   1        DB7 = sc;
 149   1        DB6 = rl;
 150   1        E = 1;
 151   1        E = 0;
 152   1        delay();
 153   1      }
 154          
 155          void functionSet(void) {
 156   1        // The high nibble for the function set is actually sent twice. Why? See 4-bit operation
 157   1        // on pages 39 and 42 of HD44780.pdf.
 158   1        DB7 = 0;
 159   1        DB6 = 0;
 160   1        DB5 = 1;
 161   1        DB4 = 0;
 162   1        RS = 0;
 163   1        E = 1;
 164   1        E = 0;
 165   1        delay();
 166   1        E = 1;
 167   1        E = 0;
 168   1        DB7 = 1;
C51 COMPILER V9.60.0.0   TESTE16X2                                                         08/21/2021 20:55:49 PAGE 4   

 169   1        E = 1;
 170   1        E = 0;
 171   1        delay();
 172   1      }
 173          
 174          void setDdRamAddress(char address) {
 175   1        RS = 0;
 176   1        DB7 = 1;
 177   1        DB6 = getBit(address, 6);
 178   1        DB5 = getBit(address, 5);
 179   1        DB4 = getBit(address, 4);
 180   1        E = 1;
 181   1        E = 0;
 182   1        DB7 = getBit(address, 3);
 183   1        DB6 = getBit(address, 2);
 184   1        DB5 = getBit(address, 1);
 185   1        DB4 = getBit(address, 0);
 186   1        E = 1;
 187   1        E = 0;
 188   1        delay();
 189   1      }
 190          
 191          void sendChar(char c) {
 192   1        DB7 = getBit(c, 7);
 193   1        DB6 = getBit(c, 6);
 194   1        DB5 = getBit(c, 5);
 195   1        DB4 = getBit(c, 4);
 196   1        RS = 1;
 197   1        E = 1;
 198   1        E = 0;
 199   1        DB7 = getBit(c, 3);
 200   1        DB6 = getBit(c, 2);
 201   1        DB5 = getBit(c, 1);
 202   1        DB4 = getBit(c, 0);
 203   1        E = 1;
 204   1        E = 0;
 205   1        delay();
 206   1      }
 207          
 208          // -- End of LCD Module instructions
 209          // --------------------------------------------------------------------
 210          
 211          void sendString(char* str) {
 212   1        int index = 0;
 213   1        while (str[index] != 0) {
 214   2          sendChar(str[index]);
 215   2          index++;
 216   2        }
 217   1      }
 218          
 219          bit getBit(char c, char bitNumber) {
 220   1        return (c >> bitNumber) & 1;
 221   1      }
 222          
 223          void delay(void) {
 224   1        char c;
 225   1        for (c = 0; c < 50; c++);
 226   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    695    ----
C51 COMPILER V9.60.0.0   TESTE16X2                                                         08/21/2021 20:55:49 PAGE 5   

   CONSTANT SIZE    =    251    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       7
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
