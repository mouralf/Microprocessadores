C51 COMPILER V9.60.0.0   DEBOUNCE                                                          11/08/2021 14:20:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DEBOUNCE
OBJECT MODULE PLACED IN .\Objects\Debounce.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Debounce.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -Debounce.lst) TABS(2) OBJECT(.\Objects\Debounce.obj)

line level    source

   1          #include <REG52.H>
   2          
   3          #define BOUNCE 7
   4          
   5          void delay_1ms(){
   6   1        /*
   7   1        frequencia da cpu = 10 MHz
   8   1        frequencia do timer = 10 MHz / 4 = 2.5 MHz -> período de 0.4 us
   9   1        
  10   1        Para o período de 1 ms, temos que ter um tempo de meia onda de 0.5 ms.
  11   1        Assim,  0.5ms / 0.4 us = 1.25 * 1000 = 1250. Para definir o prescaler, devemos dividir pelo menor valor q
             -ue o resultado seja <256
  12   1        prescaler = 8 e contagem = 156 */
  13   1        
  14   1        OPTION_REG = 0x02;                      // 0010
*** ERROR C202 IN LINE 14 OF Debounce.c: 'OPTION_REG': undefined identifier
  15   1        TMR0 = 100;                             //255 + 1 - (n_contagem)
*** ERROR C202 IN LINE 15 OF Debounce.c: 'TMR0': undefined identifier
  16   1        
  17   1        while ((INTCON & (1 <<2)) == 0);        //aguarda o estouro do timer
*** ERROR C202 IN LINE 17 OF Debounce.c: 'INTCON': undefined identifier
  18   1        INTCON &= (1<<2);                       //limpa a flag de estouro
*** ERROR C202 IN LINE 18 OF Debounce.c: 'INTCON': undefined identifier
  19   1        
  20   1      }
  21          
  22          int debounce(){
  23   1        //avalia o estado da tecla para verificar se parou de oscilar o sinal
  24   1        unsigned char count = 0; //utilizado para verificar se estabilizou (deve ser = 7)
  25   1        unsigned char tecla_antes = 0;
  26   1        unsigned char tecla_atual;
  27   1        
  28   1        
  29   1        //inicia o algoritmo para verificação do debounce
  30   1        
  31   1        while (count != 7){
  32   2          
  33   2          delay_1ms();                          //espera 1 ms para fazer a leitura
  34   2          tecla_atual = TECLA;                  //captura o estado atual da tecla
*** ERROR C202 IN LINE 34 OF Debounce.c: 'TECLA': undefined identifier
  35   2          
  36   2          if (tecla_atual == tecla_antes)       //verifica se é igual ao estado anterior
  37   2            count++;                            //incrementa o contador se for
  38   2          else
  39   2            count = 0;                          //zera o contador se não for
  40   2          
  41   2          if (count == BOUNCE)                  //se chegar no valor de debounce
  42   2            break;                              //sai do if para finalizar o while
  43   2          else
  44   2            tecla_antes = tecla_atual;          //se nao atingiu o BOUNCE, pega o estado atual da tecla
  45   2        }
  46   1      
  47   1        return tecla_atual;
  48   1      }
C51 COMPILER V9.60.0.0   DEBOUNCE                                                          11/08/2021 14:20:18 PAGE 2   

  49          
  50          void main (){
  51   1        TRISA = 0xF0;
*** ERROR C202 IN LINE 51 OF Debounce.c: 'TRISA': undefined identifier
  52   1        PORTA = 0;
*** ERROR C202 IN LINE 52 OF Debounce.c: 'PORTA': undefined identifier
  53   1        
  54   1        while (1){
  55   2          PORTA |= (1 <<2); //LIGA RA2
*** ERROR C202 IN LINE 55 OF Debounce.c: 'PORTA': undefined identifier
  56   2          delay_1ms();
  57   2          
  58   2          PORTA &= ~(1 <<2); //LIMPA RA2;
*** ERROR C202 IN LINE 58 OF Debounce.c: 'PORTA': undefined identifier
  59   2          delay_1ms();
  60   2      }
*** ERROR C141 IN LINE 60 OF Debounce.c: syntax error near '', expected '__asm'

C51 COMPILATION COMPLETE.  0 WARNING(S),  10 ERROR(S)
