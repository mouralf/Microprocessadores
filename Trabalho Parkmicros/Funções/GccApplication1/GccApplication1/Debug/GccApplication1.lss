
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000032c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc3  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078c  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000472  00000000  00000000  000017cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042e  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000256b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  8e:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	11 f4       	brne	.+4      	; 0x9e <LCD_control+0x8>
  9a:	28 9a       	sbi	0x05, 0	; 5
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <LCD_control+0xe>
  9e:	61 11       	cpse	r22, r1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <LCD_control+0xe>
  a2:	28 98       	cbi	0x05, 0	; 5
  a4:	9b b1       	in	r25, 0x0b	; 11
  a6:	9f 70       	andi	r25, 0x0F	; 15
  a8:	9b b9       	out	0x0b, r25	; 11
  aa:	9b b1       	in	r25, 0x0b	; 11
  ac:	28 2f       	mov	r18, r24
  ae:	20 7f       	andi	r18, 0xF0	; 240
  b0:	92 2b       	or	r25, r18
  b2:	9b b9       	out	0x0b, r25	; 11
  b4:	29 9a       	sbi	0x05, 1	; 5
  b6:	29 98       	cbi	0x05, 1	; 5
  b8:	ef e3       	ldi	r30, 0x3F	; 63
  ba:	fc e9       	ldi	r31, 0x9C	; 156
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_control+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_control+0x2c>
  c2:	00 00       	nop
  c4:	9b b1       	in	r25, 0x0b	; 11
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	9b b9       	out	0x0b, r25	; 11
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	82 95       	swap	r24
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	29 9a       	sbi	0x05, 1	; 5
  d6:	29 98       	cbi	0x05, 1	; 5
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_control+0x46>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_control+0x4c>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <LCD_init>:
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	84 b9       	out	0x04, r24	; 4
  ea:	80 ef       	ldi	r24, 0xF0	; 240
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9c e9       	ldi	r25, 0x9C	; 156
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_init+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_init+0x12>
  f8:	00 00       	nop
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	84 b9       	out	0x04, r24	; 4
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	80 6f       	ori	r24, 0xF0	; 240
 104:	8a b9       	out	0x0a, r24	; 10
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	88 e2       	ldi	r24, 0x28	; 40
 112:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 136:	08 95       	ret

00000138 <enviaString>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	88 81       	ld	r24, Y
 140:	88 23       	and	r24, r24
 142:	39 f0       	breq	.+14     	; 0x152 <enviaString+0x1a>
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 14c:	89 91       	ld	r24, Y+
 14e:	81 11       	cpse	r24, r1
 150:	fa cf       	rjmp	.-12     	; 0x146 <enviaString+0xe>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <atraso>:



void atraso(){
	
	TCNT1 = 42742;				   //Para 0,1 Hz
 158:	86 ef       	ldi	r24, 0xF6	; 246
 15a:	96 ea       	ldi	r25, 0xA6	; 166
 15c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 160:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
								   // assim: 65536 - 62500 = 3036
	while ((TIFR1 & (1<<0)) == 0); // Aguarda flag de estouro
 164:	b0 9b       	sbis	0x16, 0	; 22
 166:	fe cf       	rjmp	.-4      	; 0x164 <atraso+0xc>
	TIFR1 = (1<<0);				   //Limpa flag de estouro 
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	86 bb       	out	0x16, r24	; 22
 16c:	08 95       	ret

0000016e <enviaInt>:
		
}

void enviaInt(char c){
	LCD_control(c+48, 1);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 176:	08 95       	ret

00000178 <horarioAtual>:
	
}

int horarioAtual(int segundos, char min, char hora){
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	06 2f       	mov	r16, r22
	
	int min_atual;
	
	min_atual = min;
	
	atraso();
 184:	0e 94 ac 00 	call	0x158	; 0x158 <atraso>
	segundos++;
 188:	9e 01       	movw	r18, r28
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
		
	if(segundos >= 21600){
 18e:	20 36       	cpi	r18, 0x60	; 96
 190:	84 e5       	ldi	r24, 0x54	; 84
 192:	38 07       	cpc	r19, r24
 194:	0c f0       	brlt	.+2      	; 0x198 <horarioAtual+0x20>
 196:	64 c0       	rjmp	.+200    	; 0x260 <horarioAtual+0xe8>
		segundos = 0;
	}
	
	hora = segundos/900;
 198:	c9 01       	movw	r24, r18
 19a:	64 e8       	ldi	r22, 0x84	; 132
 19c:	73 e0       	ldi	r23, 0x03	; 3
 19e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__divmodhi4>
 1a2:	46 2f       	mov	r20, r22
 1a4:	16 2f       	mov	r17, r22
	min = segundos/15 - 60*hora;
 1a6:	c9 01       	movw	r24, r18
 1a8:	6f e0       	ldi	r22, 0x0F	; 15
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__divmodhi4>
 1b0:	d6 2f       	mov	r29, r22
 1b2:	8c e3       	ldi	r24, 0x3C	; 60
 1b4:	48 9f       	mul	r20, r24
 1b6:	d0 19       	sub	r29, r0
 1b8:	11 24       	eor	r1, r1
	
	if(min_atual != min)
 1ba:	0d 13       	cpse	r16, r29
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <horarioAtual+0x4c>
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <horarioAtual+0x54>
	if(segundos >= 21600){
		segundos = 0;
	}
	
	hora = segundos/900;
	min = segundos/15 - 60*hora;
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
		
	if(segundos >= 21600){
		segundos = 0;
	}
	
	hora = segundos/900;
 1c2:	10 e0       	ldi	r17, 0x00	; 0
	min = segundos/15 - 60*hora;
	
	if(min_atual != min)
		LCD_control(LCD_CLR, CNFG);	
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
	  
	enviaString("      ");
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 9c 00 	call	0x138	; 0x138 <enviaString>
			  
	if(hora > 9){
 1d4:	1a 30       	cpi	r17, 0x0A	; 10
 1d6:	a0 f0       	brcs	.+40     	; 0x200 <horarioAtual+0x88>
		enviaInt(hora/10);
 1d8:	cd ec       	ldi	r28, 0xCD	; 205
 1da:	1c 9f       	mul	r17, r28
 1dc:	c1 2d       	mov	r28, r1
 1de:	11 24       	eor	r1, r1
 1e0:	c6 95       	lsr	r28
 1e2:	c6 95       	lsr	r28
 1e4:	c6 95       	lsr	r28
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <enviaInt>
		enviaInt(hora%10);
 1ec:	cc 0f       	add	r28, r28
 1ee:	8c 2f       	mov	r24, r28
 1f0:	88 0f       	add	r24, r24
 1f2:	88 0f       	add	r24, r24
 1f4:	c8 0f       	add	r28, r24
 1f6:	81 2f       	mov	r24, r17
 1f8:	8c 1b       	sub	r24, r28
 1fa:	0e 94 b7 00 	call	0x16e	; 0x16e <enviaInt>
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <horarioAtual+0x96>
			
	}else{enviaString("0");enviaInt(hora);}
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 9c 00 	call	0x138	; 0x138 <enviaString>
 208:	81 2f       	mov	r24, r17
 20a:	0e 94 b7 00 	call	0x16e	; 0x16e <enviaInt>
		
		
	enviaString(":");
 20e:	89 e0       	ldi	r24, 0x09	; 9
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 9c 00 	call	0x138	; 0x138 <enviaString>
		
	if(min > 9){
 216:	da 30       	cpi	r29, 0x0A	; 10
 218:	a0 f0       	brcs	.+40     	; 0x242 <horarioAtual+0xca>
		enviaInt(min/10);
 21a:	cd ec       	ldi	r28, 0xCD	; 205
 21c:	dc 9f       	mul	r29, r28
 21e:	c1 2d       	mov	r28, r1
 220:	11 24       	eor	r1, r1
 222:	c6 95       	lsr	r28
 224:	c6 95       	lsr	r28
 226:	c6 95       	lsr	r28
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 b7 00 	call	0x16e	; 0x16e <enviaInt>
		enviaInt(min%10);
 22e:	cc 0f       	add	r28, r28
 230:	8c 2f       	mov	r24, r28
 232:	88 0f       	add	r24, r24
 234:	88 0f       	add	r24, r24
 236:	c8 0f       	add	r28, r24
 238:	8d 2f       	mov	r24, r29
 23a:	8c 1b       	sub	r24, r28
 23c:	0e 94 b7 00 	call	0x16e	; 0x16e <enviaInt>
 240:	12 c0       	rjmp	.+36     	; 0x266 <horarioAtual+0xee>
			
	}else{enviaString("0");enviaInt(min);}
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 9c 00 	call	0x138	; 0x138 <enviaString>
 24a:	8d 2f       	mov	r24, r29
 24c:	0e 94 b7 00 	call	0x16e	; 0x16e <enviaInt>
 250:	0a c0       	rjmp	.+20     	; 0x266 <horarioAtual+0xee>
	min = segundos/15 - 60*hora;
	
	if(min_atual != min)
		LCD_control(LCD_CLR, CNFG);	
	  
	enviaString("      ");
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 9c 00 	call	0x138	; 0x138 <enviaString>
	if(segundos >= 21600){
		segundos = 0;
	}
	
	hora = segundos/900;
	min = segundos/15 - 60*hora;
 25a:	d0 2f       	mov	r29, r16
		
	if(segundos >= 21600){
		segundos = 0;
	}
	
	hora = segundos/900;
 25c:	10 e0       	ldi	r17, 0x00	; 0
 25e:	d0 cf       	rjmp	.-96     	; 0x200 <horarioAtual+0x88>
	min = segundos/15 - 60*hora;
	
	if(min_atual != min)
 260:	01 11       	cpse	r16, r1
 262:	ae cf       	rjmp	.-164    	; 0x1c0 <horarioAtual+0x48>
 264:	f6 cf       	rjmp	.-20     	; 0x252 <horarioAtual+0xda>
		enviaInt(min/10);
		enviaInt(min%10);
			
	}else{enviaString("0");enviaInt(min);}
			
}
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <main>:

int main(void)
{ 
	
		DDRB = 0x03;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	84 b9       	out	0x04, r24	; 4
		DDRD = 0xF0;
 278:	80 ef       	ldi	r24, 0xF0	; 240
 27a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	81 ee       	ldi	r24, 0xE1	; 225
 280:	94 e0       	ldi	r25, 0x04	; 4
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0xe>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x18>
 28c:	00 00       	nop
		_delay_ms(100);
		delay_lcd();
		
		LCD_init();
 28e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_init>
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	81 ee       	ldi	r24, 0xE1	; 225
 296:	94 e0       	ldi	r25, 0x04	; 4
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x24>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x2e>
 2a2:	00 00       	nop
		_delay_ms(100);
		delay_lcd();
		LCD_control(LCD_CLR, CNFG);	
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
		enviaString("    ");
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 9c 00 	call	0x138	; 0x138 <enviaString>

	int seg = 2850;			 // valor inicial
	unsigned char hora;
	unsigned char min;
	
	TCCR1A = 0;          
 2b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0x5;		 
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCNT1 = 44684;		 //ajustado com o erro do loop 
 2be:	8c e8       	ldi	r24, 0x8C	; 140
 2c0:	9e ea       	ldi	r25, 0xAE	; 174
 2c2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2c6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>

	
    while (1) 
    {
		horarioAtual(seg, min, hora);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	82 e2       	ldi	r24, 0x22	; 34
 2d0:	9b e0       	ldi	r25, 0x0B	; 11
 2d2:	0e 94 bc 00 	call	0x178	; 0x178 <horarioAtual>
 2d6:	f9 cf       	rjmp	.-14     	; 0x2ca <main+0x56>

000002d8 <__divmodhi4>:
 2d8:	97 fb       	bst	r25, 7
 2da:	07 2e       	mov	r0, r23
 2dc:	16 f4       	brtc	.+4      	; 0x2e2 <__divmodhi4+0xa>
 2de:	00 94       	com	r0
 2e0:	07 d0       	rcall	.+14     	; 0x2f0 <__divmodhi4_neg1>
 2e2:	77 fd       	sbrc	r23, 7
 2e4:	09 d0       	rcall	.+18     	; 0x2f8 <__divmodhi4_neg2>
 2e6:	0e 94 80 01 	call	0x300	; 0x300 <__udivmodhi4>
 2ea:	07 fc       	sbrc	r0, 7
 2ec:	05 d0       	rcall	.+10     	; 0x2f8 <__divmodhi4_neg2>
 2ee:	3e f4       	brtc	.+14     	; 0x2fe <__divmodhi4_exit>

000002f0 <__divmodhi4_neg1>:
 2f0:	90 95       	com	r25
 2f2:	81 95       	neg	r24
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	08 95       	ret

000002f8 <__divmodhi4_neg2>:
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255

000002fe <__divmodhi4_exit>:
 2fe:	08 95       	ret

00000300 <__udivmodhi4>:
 300:	aa 1b       	sub	r26, r26
 302:	bb 1b       	sub	r27, r27
 304:	51 e1       	ldi	r21, 0x11	; 17
 306:	07 c0       	rjmp	.+14     	; 0x316 <__udivmodhi4_ep>

00000308 <__udivmodhi4_loop>:
 308:	aa 1f       	adc	r26, r26
 30a:	bb 1f       	adc	r27, r27
 30c:	a6 17       	cp	r26, r22
 30e:	b7 07       	cpc	r27, r23
 310:	10 f0       	brcs	.+4      	; 0x316 <__udivmodhi4_ep>
 312:	a6 1b       	sub	r26, r22
 314:	b7 0b       	sbc	r27, r23

00000316 <__udivmodhi4_ep>:
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	5a 95       	dec	r21
 31c:	a9 f7       	brne	.-22     	; 0x308 <__udivmodhi4_loop>
 31e:	80 95       	com	r24
 320:	90 95       	com	r25
 322:	bc 01       	movw	r22, r24
 324:	cd 01       	movw	r24, r26
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
