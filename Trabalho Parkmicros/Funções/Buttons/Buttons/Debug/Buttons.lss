
Buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000723  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Buttons_config>:

#define BOUNCE 7

void Buttons_config(){
	/*configura as portas referentes aos botões como INPUT*/
	DDRB &= ~(1 << DDB3);	//set D11 as INPUT
  80:	84 b1       	in	r24, 0x04	; 4
  82:	87 7f       	andi	r24, 0xF7	; 247
  84:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB4);	//set D12 as INPUT
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8f 7e       	andi	r24, 0xEF	; 239
  8a:	84 b9       	out	0x04, r24	; 4
  8c:	08 95       	ret

0000008e <delay_1ms>:
}

void delay_1ms(){
  TCCR0A = 0x2;						//modo CTC para o timer 0
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	84 bd       	out	0x24, r24	; 36
  TCCR0B = 0x4;						//clock/256
  92:	94 e0       	ldi	r25, 0x04	; 4
  94:	95 bd       	out	0x25, r25	; 37
  TCNT0 = 0;						//Zera timer
  96:	16 bc       	out	0x26, r1	; 38
  OCR0A = 63;						//Valor de comparação 63 contagens (1 ms)
  98:	9f e3       	ldi	r25, 0x3F	; 63
  9a:	97 bd       	out	0x27, r25	; 39

  TIFR0 = (1 << 1);					//limpa flag de comparacao A
  9c:	85 bb       	out	0x15, r24	; 21
  
  while((TIFR0 & (1 << 1)) == 0);	//enquanto não estoura o flag
  9e:	a9 9b       	sbis	0x15, 1	; 21
  a0:	fe cf       	rjmp	.-4      	; 0x9e <delay_1ms+0x10>
}
  a2:	08 95       	ret

000000a4 <Buttons_validation>:


float Buttons_validation(){
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
	unsigned char count = 0;					//utilizados para controle do debounce
  a8:	c0 e0       	ldi	r28, 0x00	; 0
}


float Buttons_validation(){
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
  aa:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char count = 0;					//utilizados para controle do debounce
	float valor = 0;
	
	while(count != BOUNCE){						//enquanto count não atingir 7
  ac:	24 c0       	rjmp	.+72     	; 0xf6 <Buttons_validation+0x52>
		delay_1ms();							//delay para corrigir o debounce
  ae:	0e 94 47 00 	call	0x8e	; 0x8e <delay_1ms>
		if(PINB >> PB3 == 1){					//se a leitura do registrador B deslocada em 3 bits for 1 foi pressionado o botão D11/PB3
  b2:	83 b1       	in	r24, 0x03	; 3
  b4:	86 95       	lsr	r24
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	61 f4       	brne	.+24     	; 0xd6 <Buttons_validation+0x32>
			botaoAtual = (PINB >> PB3);			//le o estado atual do botão D11
  be:	83 b1       	in	r24, 0x03	; 3
  c0:	86 95       	lsr	r24
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
			if (botaoAtual == botaoAntes)		//se for igual ao estado anterior
  c6:	d8 13       	cpse	r29, r24
  c8:	02 c0       	rjmp	.+4      	; 0xce <Buttons_validation+0x2a>
			count++;							//incrementa o contador
  ca:	cf 5f       	subi	r28, 0xFF	; 255
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <Buttons_validation+0x2c>
			else
			count = 0;							//senão, zera o contador
  ce:	c0 e0       	ldi	r28, 0x00	; 0
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
  d0:	c7 30       	cpi	r28, 0x07	; 7
  d2:	b9 f0       	breq	.+46     	; 0x102 <Buttons_validation+0x5e>
				valor = 0.50;					//seta o valor a ser retornado para 0.50
				//Serial.println("D11 pressionado");
				break;
			}
			else
			botaoAntes = botaoAtual;			//se nao tiver atingido 7, volta a contar
  d4:	d8 2f       	mov	r29, r24
		}
		if(PINB >> PB4 == 1){					//se a leitura do registrador B deslocada em 4 bits for 1 foi pressionado o botão D12/PB4
  d6:	83 b1       	in	r24, 0x03	; 3
  d8:	82 95       	swap	r24
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <Buttons_validation+0x52>
			botaoAtual = (PINB >> PB4);			//le o estado atual do botão D12
  e0:	83 b1       	in	r24, 0x03	; 3
  e2:	82 95       	swap	r24
  e4:	8f 70       	andi	r24, 0x0F	; 15
			if (botaoAtual == botaoAntes)		//se for igual ao estado anterior
  e6:	d8 13       	cpse	r29, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <Buttons_validation+0x4a>
			count++;							//incrementa o contador
  ea:	cf 5f       	subi	r28, 0xFF	; 255
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <Buttons_validation+0x4c>
			else
			count = 0;							//senão, zera o contador
  ee:	c0 e0       	ldi	r28, 0x00	; 0
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
  f0:	c7 30       	cpi	r28, 0x07	; 7
  f2:	61 f0       	breq	.+24     	; 0x10c <Buttons_validation+0x68>
				valor = 1;					//seta o valor a ser retornado para 1
				//Serial.println("D12 pressionado");
				break;
			}
			else
			botaoAntes = botaoAtual;			//se nao tiver atingido 7, volta a contar
  f4:	d8 2f       	mov	r29, r24
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
	unsigned char count = 0;					//utilizados para controle do debounce
	float valor = 0;
	
	while(count != BOUNCE){						//enquanto count não atingir 7
  f6:	c7 30       	cpi	r28, 0x07	; 7
  f8:	d1 f6       	brne	.-76     	; 0xae <Buttons_validation+0xa>

float Buttons_validation(){
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
	unsigned char count = 0;					//utilizados para controle do debounce
	float valor = 0;
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	cb 01       	movw	r24, r22
 100:	09 c0       	rjmp	.+18     	; 0x114 <Buttons_validation+0x70>
			count++;							//incrementa o contador
			else
			count = 0;							//senão, zera o contador
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
				valor = 0.50;					//seta o valor a ser retornado para 0.50
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	9f e3       	ldi	r25, 0x3F	; 63
 10a:	04 c0       	rjmp	.+8      	; 0x114 <Buttons_validation+0x70>
			count++;							//incrementa o contador
			else
			count = 0;							//senão, zera o contador
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
				valor = 1;					//seta o valor a ser retornado para 1
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	9f e3       	ldi	r25, 0x3F	; 63
			else
			botaoAntes = botaoAtual;			//se nao tiver atingido 7, volta a contar
		}
	}
	return valor;
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:

int main(void)
{
	Buttons_config(); //chama a função que configura as portas dos botões como INPUT
 11a:	0e 94 40 00 	call	0x80	; 0x80 <Buttons_config>
	/* Replace with your application code */
	while (1)
	{
		Buttons_validation();
 11e:	0e 94 52 00 	call	0xa4	; 0xa4 <Buttons_validation>
 122:	fd cf       	rjmp	.-6      	; 0x11e <main+0x4>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
