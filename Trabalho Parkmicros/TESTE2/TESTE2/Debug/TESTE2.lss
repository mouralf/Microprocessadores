
TESTE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a28  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b2  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030c  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8e:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	21 f4       	brne	.+8      	; 0xa2 <LCD_control+0xc>
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	91 60       	ori	r25, 0x01	; 1
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	05 c0       	rjmp	.+10     	; 0xac <LCD_control+0x16>
  a2:	61 11       	cpse	r22, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCD_control+0x16>
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	9e 7f       	andi	r25, 0xFE	; 254
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	28 2f       	mov	r18, r24
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	92 2b       	or	r25, r18
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	92 60       	ori	r25, 0x02	; 2
  c0:	95 b9       	out	0x05, r25	; 5
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	9d 7f       	andi	r25, 0xFD	; 253
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	39 ef       	ldi	r19, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <LCD_control+0x38>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_control+0x42>
  d8:	00 00       	nop
  da:	9b b1       	in	r25, 0x0b	; 11
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	9b b9       	out	0x0b, r25	; 11
  e0:	9b b1       	in	r25, 0x0b	; 11
  e2:	82 95       	swap	r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	89 2b       	or	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	39 ef       	ldi	r19, 0xF9	; 249
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	30 40       	sbci	r19, 0x00	; 0
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <LCD_control+0x66>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_control+0x70>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <LCD_init>:
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	80 ef       	ldi	r24, 0xF0	; 240
 110:	8a b9       	out	0x0a, r24	; 10
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 ef       	ldi	r24, 0xF9	; 249
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <LCD_init+0xe>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_init+0x18>
 122:	00 00       	nop
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 14c:	08 95       	ret

0000014e <enviaString>:
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	8c 01       	movw	r16, r24
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
 15c:	04 c0       	rjmp	.+8      	; 0x166 <enviaString+0x18>
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 164:	21 96       	adiw	r28, 0x01	; 1
 166:	f8 01       	movw	r30, r16
 168:	ec 0f       	add	r30, r28
 16a:	fd 1f       	adc	r31, r29
 16c:	80 81       	ld	r24, Z
 16e:	81 11       	cpse	r24, r1
 170:	f6 cf       	rjmp	.-20     	; 0x15e <enviaString+0x10>
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <main>:

int main(){
	
	DDRB = 0x03;
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	83 ec       	ldi	r24, 0xC3	; 195
 188:	99 e0       	ldi	r25, 0x09	; 9
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0xe>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x18>
 194:	00 00       	nop
	_delay_ms(100);
	
	LCD_init();
 196:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_init>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	83 ec       	ldi	r24, 0xC3	; 195
 19e:	99 e0       	ldi	r25, 0x09	; 9
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x24>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x2e>
 1aa:	00 00       	nop
	_delay_ms(100);
	
	LCD_control(LCD_CLR, CNFG);					//Limpa a tela e põe o cursor em 0,0
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
	enviaString("Deu certo");
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 a7 00 	call	0x14e	; 0x14e <enviaString>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	83 ec       	ldi	r24, 0xC3	; 195
 1c0:	99 e0       	ldi	r25, 0x09	; 9
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x46>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x50>
 1cc:	00 00       	nop
	_delay_ms(100);
	LCD_control(LCD_SEG_LINHA, CNFG);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 ec       	ldi	r24, 0xC0	; 192
 1d2:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	83 ec       	ldi	r24, 0xC3	; 195
 1da:	99 e0       	ldi	r25, 0x09	; 9
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x60>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x6a>
 1e6:	00 00       	nop
	_delay_ms(100);
	enviaString("So que nao :)");
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 a7 00 	call	0x14e	; 0x14e <enviaString>
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0x74>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
