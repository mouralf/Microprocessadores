
validaPlaca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000002de  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3c  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044d  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ad  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  8e:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	21 f4       	brne	.+8      	; 0xa2 <LCD_control+0xc>
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	91 60       	ori	r25, 0x01	; 1
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	05 c0       	rjmp	.+10     	; 0xac <LCD_control+0x16>
  a2:	61 11       	cpse	r22, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCD_control+0x16>
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	9e 7f       	andi	r25, 0xFE	; 254
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	28 2f       	mov	r18, r24
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	92 2b       	or	r25, r18
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	92 60       	ori	r25, 0x02	; 2
  c0:	95 b9       	out	0x05, r25	; 5
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	9d 7f       	andi	r25, 0xFD	; 253
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	9b b1       	in	r25, 0x0b	; 11
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	9b b9       	out	0x0b, r25	; 11
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	82 95       	swap	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	89 2b       	or	r24, r25
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 b9       	out	0x05, r24	; 5
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <LCD_init>:
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 122:	08 95       	ret

00000124 <enviaString>:
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	8c 01       	movw	r16, r24
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	04 c0       	rjmp	.+8      	; 0x13c <enviaString+0x18>
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	80 81       	ld	r24, Z
 144:	81 11       	cpse	r24, r1
 146:	f6 cf       	rjmp	.-20     	; 0x134 <enviaString+0x10>
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <comparaString>:
	"IDO1020",
	"IDS0089",
	"PNE0102"
};	

int comparaString(char* str1, char* str2){ //compara duas strings de 7 algarismos para verificar se sao iguais
 152:	dc 01       	movw	r26, r24
	int i;
	
	for(i=0; i<7; i++){
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	0c c0       	rjmp	.+24     	; 0x172 <comparaString+0x20>
		if(str1[i] != str2[i])				//caso sejam diferentes, retorna 0
 15a:	fd 01       	movw	r30, r26
 15c:	e2 0f       	add	r30, r18
 15e:	f3 1f       	adc	r31, r19
 160:	40 81       	ld	r20, Z
 162:	fb 01       	movw	r30, r22
 164:	e2 0f       	add	r30, r18
 166:	f3 1f       	adc	r31, r19
 168:	90 81       	ld	r25, Z
 16a:	49 13       	cpse	r20, r25
 16c:	08 c0       	rjmp	.+16     	; 0x17e <comparaString+0x2c>
};	

int comparaString(char* str1, char* str2){ //compara duas strings de 7 algarismos para verificar se sao iguais
	int i;
	
	for(i=0; i<7; i++){
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	27 30       	cpi	r18, 0x07	; 7
 174:	31 05       	cpc	r19, r1
 176:	8c f3       	brlt	.-30     	; 0x15a <comparaString+0x8>
		if(str1[i] != str2[i])				//caso sejam diferentes, retorna 0
			return 0;
	}
	return 1;								//caso sejam iguais, retorna 1
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	08 95       	ret
int comparaString(char* str1, char* str2){ //compara duas strings de 7 algarismos para verificar se sao iguais
	int i;
	
	for(i=0; i<7; i++){
		if(str1[i] != str2[i])				//caso sejam diferentes, retorna 0
			return 0;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;								//caso sejam iguais, retorna 1
}
 182:	08 95       	ret

00000184 <validaPlaca>:


int validaPlaca(char* str){  //retorna 0 se a placa é inválida, e 1 se a placa é válida
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	27 97       	sbiw	r28, 0x07	; 7
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
	int j, k, i = 0;
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
	char aux[7];
	
	
	while(i != 7){
 1a4:	1c c0       	rjmp	.+56     	; 0x1de <validaPlaca+0x5a>
		
		if(i < 3){
 1a6:	23 30       	cpi	r18, 0x03	; 3
 1a8:	31 05       	cpc	r19, r1
 1aa:	3c f4       	brge	.+14     	; 0x1ba <validaPlaca+0x36>
			if(str[i] < 65){   //na tabela ascii o numero decimal equivalente em que começa a ter letras é 65
 1ac:	fc 01       	movw	r30, r24
 1ae:	e2 0f       	add	r30, r18
 1b0:	f3 1f       	adc	r31, r19
 1b2:	40 81       	ld	r20, Z
 1b4:	41 34       	cpi	r20, 0x41	; 65
 1b6:	08 f4       	brcc	.+2      	; 0x1ba <validaPlaca+0x36>
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <validaPlaca+0xc0>
				return 0;		//caso seja menor que 65 não é uma letra ou seja é invalida a placa, nas 3 primeiras letras
			}
		}
		
		if(i >= 3){
 1ba:	23 30       	cpi	r18, 0x03	; 3
 1bc:	31 05       	cpc	r19, r1
 1be:	6c f0       	brlt	.+26     	; 0x1da <validaPlaca+0x56>
			if(str[i] < 48 || str[i] > 57){		//verifica se os ultimos 4 caracteres sao numeros
 1c0:	fc 01       	movw	r30, r24
 1c2:	e2 0f       	add	r30, r18
 1c4:	f3 1f       	adc	r31, r19
 1c6:	40 81       	ld	r20, Z
 1c8:	50 ed       	ldi	r21, 0xD0	; 208
 1ca:	54 0f       	add	r21, r20
 1cc:	5a 30       	cpi	r21, 0x0A	; 10
 1ce:	28 f0       	brcs	.+10     	; 0x1da <validaPlaca+0x56>
				if(str[i] >= 65){				//verifica se é uma letra
 1d0:	41 34       	cpi	r20, 0x41	; 65
 1d2:	d8 f1       	brcs	.+118    	; 0x24a <validaPlaca+0xc6>
					if(i != 4){					//caso seja uma letra, verifica se é no quinto caracter por causa das novas placas
 1d4:	24 30       	cpi	r18, 0x04	; 4
 1d6:	31 05       	cpc	r19, r1
 1d8:	d9 f5       	brne	.+118    	; 0x250 <validaPlaca+0xcc>
				else {							//caso não seja uma letra nem número retorna placa invalida
					return 0;
				}				
			}
		}
		i++;
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
int validaPlaca(char* str){  //retorna 0 se a placa é inválida, e 1 se a placa é válida
	int j, k, i = 0;
	char aux[7];
	
	
	while(i != 7){
 1de:	27 30       	cpi	r18, 0x07	; 7
 1e0:	31 05       	cpc	r19, r1
 1e2:	09 f7       	brne	.-62     	; 0x1a6 <validaPlaca+0x22>
 1e4:	7c 01       	movw	r14, r24
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	26 c0       	rjmp	.+76     	; 0x238 <validaPlaca+0xb4>
	}
	
	
	for(j=0; j<3; j++){
		for(k=0; k<7; k++){
			aux[k] = placas_idosos_PNE[j][k];		//copia a placa do idoso para uma string auxiliar
 1ec:	f8 01       	movw	r30, r16
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 1b       	sub	r30, r16
 1fc:	f1 0b       	sbc	r31, r17
 1fe:	e9 5c       	subi	r30, 0xC9	; 201
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	e8 0f       	add	r30, r24
 204:	f9 1f       	adc	r31, r25
 206:	20 81       	ld	r18, Z
 208:	e1 e0       	ldi	r30, 0x01	; 1
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	e8 0f       	add	r30, r24
 212:	f9 1f       	adc	r31, r25
 214:	20 83       	st	Z, r18
		i++;
	}
	
	
	for(j=0; j<3; j++){
		for(k=0; k<7; k++){
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	02 c0       	rjmp	.+4      	; 0x21e <validaPlaca+0x9a>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	87 30       	cpi	r24, 0x07	; 7
 220:	91 05       	cpc	r25, r1
 222:	24 f3       	brlt	.-56     	; 0x1ec <validaPlaca+0x68>
			aux[k] = placas_idosos_PNE[j][k];		//copia a placa do idoso para uma string auxiliar
		}
		if(comparaString(str, aux))				//compara as duas placas
 224:	be 01       	movw	r22, r28
 226:	6f 5f       	subi	r22, 0xFF	; 255
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	c7 01       	movw	r24, r14
 22c:	0e 94 a9 00 	call	0x152	; 0x152 <comparaString>
 230:	89 2b       	or	r24, r25
 232:	89 f4       	brne	.+34     	; 0x256 <validaPlaca+0xd2>
		}
		i++;
	}
	
	
	for(j=0; j<3; j++){
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	03 30       	cpi	r16, 0x03	; 3
 23a:	11 05       	cpc	r17, r1
 23c:	74 f3       	brlt	.-36     	; 0x21a <validaPlaca+0x96>
			aux[k] = placas_idosos_PNE[j][k];		//copia a placa do idoso para uma string auxiliar
		}
		if(comparaString(str, aux))				//compara as duas placas
			return 2;							//retorna 2 se for caso especial, ex. idoso
	}
	return 1;									//retorna 1 se a placa for válida
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0b c0       	rjmp	.+22     	; 0x25a <validaPlaca+0xd6>
	
	while(i != 7){
		
		if(i < 3){
			if(str[i] < 65){   //na tabela ascii o numero decimal equivalente em que começa a ter letras é 65
				return 0;		//caso seja menor que 65 não é uma letra ou seja é invalida a placa, nas 3 primeiras letras
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 c0       	rjmp	.+16     	; 0x25a <validaPlaca+0xd6>
					if(i != 4){					//caso seja uma letra, verifica se é no quinto caracter por causa das novas placas
						return 0;				//caso não seja retorna placa invalida
					}
				}
				else {							//caso não seja uma letra nem número retorna placa invalida
					return 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	05 c0       	rjmp	.+10     	; 0x25a <validaPlaca+0xd6>
		
		if(i >= 3){
			if(str[i] < 48 || str[i] > 57){		//verifica se os ultimos 4 caracteres sao numeros
				if(str[i] >= 65){				//verifica se é uma letra
					if(i != 4){					//caso seja uma letra, verifica se é no quinto caracter por causa das novas placas
						return 0;				//caso não seja retorna placa invalida
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <validaPlaca+0xd6>
	for(j=0; j<3; j++){
		for(k=0; k<7; k++){
			aux[k] = placas_idosos_PNE[j][k];		//copia a placa do idoso para uma string auxiliar
		}
		if(comparaString(str, aux))				//compara as duas placas
			return 2;							//retorna 2 se for caso especial, ex. idoso
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;									//retorna 1 se a placa for válida
}
 25a:	27 96       	adiw	r28, 0x07	; 7
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

00000274 <main>:


int main(void)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	28 97       	sbiw	r28, 0x08	; 8
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
    char placa[] = "PNE0102";
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	ef e2       	ldi	r30, 0x2F	; 47
 28c:	f1 e0       	ldi	r31, 0x01	; 1
 28e:	de 01       	movw	r26, r28
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x1e>
	int val, especial;
	
	DDRB = 0x03;
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 29e:	80 ef       	ldi	r24, 0xF0	; 240
 2a0:	8a b9       	out	0x0a, r24	; 10
	delay_lcd();
	
	LCD_init();
 2a2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_init>
	delay_lcd();
	
	val = validaPlaca(placa);
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	0e 94 c2 00 	call	0x184	; 0x184 <validaPlaca>
 2ae:	8c 01       	movw	r16, r24
	
	if(val==1)
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	21 f4       	brne	.+8      	; 0x2bc <main+0x48>
		enviaString("Placa valida");
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 92 00 	call	0x124	; 0x124 <enviaString>
		
	if(val==0)
 2bc:	01 15       	cp	r16, r1
 2be:	11 05       	cpc	r17, r1
 2c0:	21 f4       	brne	.+8      	; 0x2ca <main+0x56>
		enviaString("Placa invalida");
 2c2:	8d e0       	ldi	r24, 0x0D	; 13
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 92 00 	call	0x124	; 0x124 <enviaString>
		
	if(val==2){
 2ca:	02 30       	cpi	r16, 0x02	; 2
 2cc:	11 05       	cpc	r17, r1
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <main+0x64>
		enviaString("Placa preferencial");
 2d0:	8c e1       	ldi	r24, 0x1C	; 28
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 92 00 	call	0x124	; 0x124 <enviaString>
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <main+0x64>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
