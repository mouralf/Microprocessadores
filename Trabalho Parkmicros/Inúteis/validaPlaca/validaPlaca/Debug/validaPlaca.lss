
validaPlaca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093e  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ee  00000000  00000000  00001bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8e:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	21 f4       	brne	.+8      	; 0xa2 <LCD_control+0xc>
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	91 60       	ori	r25, 0x01	; 1
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	05 c0       	rjmp	.+10     	; 0xac <LCD_control+0x16>
  a2:	61 11       	cpse	r22, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCD_control+0x16>
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	9e 7f       	andi	r25, 0xFE	; 254
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	28 2f       	mov	r18, r24
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	92 2b       	or	r25, r18
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	92 60       	ori	r25, 0x02	; 2
  c0:	95 b9       	out	0x05, r25	; 5
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	9d 7f       	andi	r25, 0xFD	; 253
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	9b b1       	in	r25, 0x0b	; 11
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	9b b9       	out	0x0b, r25	; 11
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	82 95       	swap	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	89 2b       	or	r24, r25
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 b9       	out	0x05, r24	; 5
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <LCD_init>:
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 122:	08 95       	ret

00000124 <enviaString>:
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	8c 01       	movw	r16, r24
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	04 c0       	rjmp	.+8      	; 0x13c <enviaString+0x18>
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	80 81       	ld	r24, Z
 144:	81 11       	cpse	r24, r1
 146:	f6 cf       	rjmp	.-20     	; 0x134 <enviaString+0x10>
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <validaPlaca>:


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//CODIGO DA VALIDAÇÃO DA PLACA A PARTIR DAQUI

int validaPlaca(char* str){  //retorna 0 se a placa é inválida, e 1 se a placa é válida
 152:	ac 01       	movw	r20, r24
	int i = 0;
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
	
	while(i != 7){
 158:	1b c0       	rjmp	.+54     	; 0x190 <validaPlaca+0x3e>
		
		if(i < 3){
 15a:	23 30       	cpi	r18, 0x03	; 3
 15c:	31 05       	cpc	r19, r1
 15e:	34 f4       	brge	.+12     	; 0x16c <validaPlaca+0x1a>
			if(str[i] < 65){   //na tabela ascii o numero decimal equivalente em que começa a ter letras é 65
 160:	fa 01       	movw	r30, r20
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	c0 f0       	brcs	.+48     	; 0x19c <validaPlaca+0x4a>
				return 0;		//caso seja menor que 65 não é uma letra ou seja é invalida a placa, nas 3 primeiras letras
			}
		}
		
		if(i >= 3){
 16c:	23 30       	cpi	r18, 0x03	; 3
 16e:	31 05       	cpc	r19, r1
 170:	6c f0       	brlt	.+26     	; 0x18c <validaPlaca+0x3a>
			if(str[i] < 48 || str[i] > 57){		//verifica se os ultimos 4 caracteres sao numeros
 172:	fa 01       	movw	r30, r20
 174:	e2 0f       	add	r30, r18
 176:	f3 1f       	adc	r31, r19
 178:	90 81       	ld	r25, Z
 17a:	80 ed       	ldi	r24, 0xD0	; 208
 17c:	89 0f       	add	r24, r25
 17e:	8a 30       	cpi	r24, 0x0A	; 10
 180:	28 f0       	brcs	.+10     	; 0x18c <validaPlaca+0x3a>
				if(str[i] >= 65){				//verifica se é uma letra
 182:	91 34       	cpi	r25, 0x41	; 65
 184:	70 f0       	brcs	.+28     	; 0x1a2 <validaPlaca+0x50>
					if(i != 4){					//caso seja uma letra, verifica se é no quinto caracter por causa das novas placas
 186:	24 30       	cpi	r18, 0x04	; 4
 188:	31 05       	cpc	r19, r1
 18a:	71 f4       	brne	.+28     	; 0x1a8 <validaPlaca+0x56>
				else {							//caso não seja uma letra nem número retorna placa invalida
					return 0;
				}				
			}
		}
		i++;
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
//CODIGO DA VALIDAÇÃO DA PLACA A PARTIR DAQUI

int validaPlaca(char* str){  //retorna 0 se a placa é inválida, e 1 se a placa é válida
	int i = 0;
	
	while(i != 7){
 190:	27 30       	cpi	r18, 0x07	; 7
 192:	31 05       	cpc	r19, r1
 194:	11 f7       	brne	.-60     	; 0x15a <validaPlaca+0x8>
				}				
			}
		}
		i++;
	}
	return 1;									//retorna 1 se a placa for válida
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret
	
	while(i != 7){
		
		if(i < 3){
			if(str[i] < 65){   //na tabela ascii o numero decimal equivalente em que começa a ter letras é 65
				return 0;		//caso seja menor que 65 não é uma letra ou seja é invalida a placa, nas 3 primeiras letras
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret
					if(i != 4){					//caso seja uma letra, verifica se é no quinto caracter por causa das novas placas
						return 0;				//caso não seja retorna placa invalida
					}
				}
				else {							//caso não seja uma letra nem número retorna placa invalida
					return 0;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret
		
		if(i >= 3){
			if(str[i] < 48 || str[i] > 57){		//verifica se os ultimos 4 caracteres sao numeros
				if(str[i] >= 65){				//verifica se é uma letra
					if(i != 4){					//caso seja uma letra, verifica se é no quinto caracter por causa das novas placas
						return 0;				//caso não seja retorna placa invalida
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		i++;
	}
	return 1;									//retorna 1 se a placa for válida
}
 1ac:	08 95       	ret

000001ae <main>:


int main(void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	28 97       	sbiw	r28, 0x08	; 8
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
    char placa[] = "ABC1D34";
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	e1 e2       	ldi	r30, 0x21	; 33
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	de 01       	movw	r26, r28
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	8a 95       	dec	r24
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x1e>
	int val;
	
	//
	DDRB = 0x03;
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 1d8:	80 ef       	ldi	r24, 0xF0	; 240
 1da:	8a b9       	out	0x0a, r24	; 10
	delay_lcd();
	
	LCD_init();
 1dc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_init>
	delay_lcd();
	//
	
	val = validaPlaca(placa);
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	0e 94 a9 00 	call	0x152	; 0x152 <validaPlaca>
 1e8:	8c 01       	movw	r16, r24
	
	if(val == 1)
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0x48>
		enviaString("Placa valida :)");
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 92 00 	call	0x124	; 0x124 <enviaString>
	if(val == 0)
 1f6:	01 2b       	or	r16, r17
 1f8:	21 f4       	brne	.+8      	; 0x202 <main+0x54>
		enviaString("Placa invalida:(");
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 92 00 	call	0x124	; 0x124 <enviaString>
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x54>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
