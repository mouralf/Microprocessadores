
Teclado_telefone_1 letra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000714  00000788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000714  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b24  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000761  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000568  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cf  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f0  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  68:	12 02       	muls	r17, r18
  6a:	fa 01       	movw	r30, r20
  6c:	fd 01       	movw	r30, r26
  6e:	01 02       	muls	r16, r17
  70:	06 02       	muls	r16, r22
  72:	12 02       	muls	r17, r18
  74:	0a 02       	muls	r16, r26
  76:	0f 02       	muls	r16, r31

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e4 e1       	ldi	r30, 0x14	; 20
  8c:	f7 e0       	ldi	r31, 0x07	; 7
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  9e:	0c 94 88 03 	jmp	0x710	; 0x710 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:
void enviaChar(char c){
	LCD_control(c, 1);    //envia o char c
}

void enviaInt(int c){
	LCD_control(c+48, 1); //soma 48 para ser o numero em char da tabela ascii
  a6:	cf 93       	push	r28
  a8:	c2 e0       	ldi	r28, 0x02	; 2
  aa:	c4 bd       	out	0x24, r28	; 36
  ac:	25 e0       	ldi	r18, 0x05	; 5
  ae:	25 bd       	out	0x25, r18	; 37
  b0:	16 bc       	out	0x26, r1	; 38
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e8       	ldi	r20, 0x80	; 128
  b8:	5c e3       	ldi	r21, 0x3C	; 60
  ba:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	4a e7       	ldi	r20, 0x7A	; 122
  c4:	54 e4       	ldi	r21, 0x44	; 68
  c6:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3>
  ca:	0e 94 0d 03 	call	0x61a	; 0x61a <round>
  ce:	0e 94 48 02 	call	0x490	; 0x490 <__fixunssfsi>
  d2:	67 bd       	out	0x27, r22	; 39
  d4:	c5 bb       	out	0x15, r28	; 21
  d6:	a9 9b       	sbis	0x15, 1	; 21
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <delay_ms+0x30>
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <LCD_control>:
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	21 f4       	brne	.+8      	; 0xee <LCD_control+0x10>
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <LCD_control+0x1a>
  ee:	61 11       	cpse	r22, r1
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <LCD_control+0x1a>
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	9c 2f       	mov	r25, r28
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	89 2b       	or	r24, r25
 106:	8b b9       	out	0x0b, r24	; 11
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	85 b9       	out	0x05, r24	; 5
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	91 e4       	ldi	r25, 0x41	; 65
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	8b b9       	out	0x0b, r24	; 11
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	c2 95       	swap	r28
 12a:	c0 7f       	andi	r28, 0xF0	; 240
 12c:	c8 2b       	or	r28, r24
 12e:	cb b9       	out	0x0b, r28	; 11
 130:	85 b1       	in	r24, 0x05	; 5
 132:	82 60       	ori	r24, 0x02	; 2
 134:	85 b9       	out	0x05, r24	; 5
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	91 e4       	ldi	r25, 0x41	; 65
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LCD_init>:
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	83 60       	ori	r24, 0x03	; 3
 150:	84 b9       	out	0x04, r24	; 4
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 6f       	ori	r24, 0xF0	; 240
 156:	8a b9       	out	0x0a, r24	; 10
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	91 e4       	ldi	r25, 0x41	; 65
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 194:	08 95       	ret

00000196 <enviaChar>:
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 19c:	08 95       	ret

0000019e <Keyboard_config>:
#define COLUNA3 PC3	//A3

#define INTERVALOMAX 1000 //máximo intervalo de tempo em ms entre cliques no botão pra  percorrer o alfabeto
void Keyboard_config(){
	//configura as linhas como saída
	DDRD |= (1 << DDD0); //set PD0 as OUTPUT
 19e:	8a b1       	in	r24, 0x0a	; 10
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1); //set PD1 as OUTPUT
 1a4:	8a b1       	in	r24, 0x0a	; 10
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD2); //set PD2 as OUTPUT
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD3); //set PD3 as OUTPUT
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	8a b9       	out	0x0a, r24	; 10
	
	//configura as colunas como entrada
	DDRC &= ~(1 << DDC1); //set PC1 as INPUT
 1b6:	87 b1       	in	r24, 0x07	; 7
 1b8:	8d 7f       	andi	r24, 0xFD	; 253
 1ba:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC2); //set PC2 as INPUT
 1bc:	87 b1       	in	r24, 0x07	; 7
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC3); //set PC3 as INPUT
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	87 7f       	andi	r24, 0xF7	; 247
 1c6:	87 b9       	out	0x07, r24	; 7
	
	//configura as resistências de  pull_up das colunas
	PORTC |= (1 << COLUNA1); //set PC1 as INPUT_PULLUP
 1c8:	88 b1       	in	r24, 0x08	; 8
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA2); //set PC2 as INPUT_PULLUP
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA3); //set PC3 as INPUT_PULLUP
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	88 b9       	out	0x08, r24	; 8
 1da:	08 95       	ret

000001dc <TecladoMatricial>:





char TecladoMatricial(){
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2c 97       	sbiw	r28, 0x0c	; 12
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
	//função para realizar a multiplexação pra identificar a tecla pressionada
	char teclasMatricial [4][3] =	{	//[linhas][colunas]
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	e0 e0       	ldi	r30, 0x00	; 0
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	de 01       	movw	r26, r28
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <TecladoMatricial+0x20>
										{'*','0', '#'},
									};
	char tecla_pressionada = ' ', teclaAnterior;
	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
										{'1','2', '3'},
										{'4','5', '6'},
										{'7','8', '9'},
										{'*','0', '#'},
									};
	char tecla_pressionada = ' ', teclaAnterior;
 208:	10 e2       	ldi	r17, 0x20	; 32
	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 20a:	5d c0       	rjmp	.+186    	; 0x2c6 <TecladoMatricial+0xea>
		PORTD &= ~(1 << linha);							//coloca o pino referente à linha em LOW
 20c:	2b b1       	in	r18, 0x0b	; 11
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	04 2e       	mov	r0, r20
 214:	02 c0       	rjmp	.+4      	; 0x21a <TecladoMatricial+0x3e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <TecladoMatricial+0x3a>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	8b b9       	out	0x0b, r24	; 11
		for (int outras = 0; outras < 4; outras++){		//percorre novamente todas as linhas
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	10 c0       	rjmp	.+32     	; 0x24a <TecladoMatricial+0x6e>
			if(outras!= linha){							//verifica se outras é diferente de linha, se for
 22a:	42 17       	cp	r20, r18
 22c:	53 07       	cpc	r21, r19
 22e:	59 f0       	breq	.+22     	; 0x246 <TecladoMatricial+0x6a>
				PORTD |= (1 << outras);					//coloca as outras portas em HIGH
 230:	6b b1       	in	r22, 0x0b	; 11
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 2e       	mov	r0, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <TecladoMatricial+0x62>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <TecladoMatricial+0x5e>
 242:	86 2b       	or	r24, r22
 244:	8b b9       	out	0x0b, r24	; 11
	char tecla_pressionada = ' ', teclaAnterior;
	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
		PORTD &= ~(1 << linha);							//coloca o pino referente à linha em LOW
		for (int outras = 0; outras < 4; outras++){		//percorre novamente todas as linhas
 246:	2f 5f       	subi	r18, 0xFF	; 255
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	24 30       	cpi	r18, 0x04	; 4
 24c:	31 05       	cpc	r19, r1
 24e:	6c f3       	brlt	.-38     	; 0x22a <TecladoMatricial+0x4e>
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	33 c0       	rjmp	.+102    	; 0x2bc <TecladoMatricial+0xe0>
				PORTD |= (1 << outras);					//coloca as outras portas em HIGH
			}
		}
		//delay_ms(10);
		for (int colunas = 1; colunas <=3; colunas++){			//percorre todas as colunas
			if(!((PINC & (1 << colunas)) >> colunas)){			//se a coluna em questão for LOW, então significa que foi pressionada
 256:	86 b1       	in	r24, 0x06	; 6
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	02 2e       	mov	r0, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <TecladoMatricial+0x88>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <TecladoMatricial+0x84>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	86 23       	and	r24, r22
 26c:	97 23       	and	r25, r23
 26e:	02 2e       	mov	r0, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <TecladoMatricial+0x9a>
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <TecladoMatricial+0x96>
 27a:	89 2b       	or	r24, r25
 27c:	e9 f4       	brne	.+58     	; 0x2b8 <TecladoMatricial+0xdc>
				tecla_pressionada =  (teclasMatricial[linha][colunas-1]); //armazena a tecla pressionada
 27e:	fa 01       	movw	r30, r20
 280:	ee 0f       	add	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	e4 0f       	add	r30, r20
 286:	f5 1f       	adc	r31, r21
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	8c 0f       	add	r24, r28
 28e:	9d 1f       	adc	r25, r29
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	c9 01       	movw	r24, r18
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	e8 0f       	add	r30, r24
 29a:	f9 1f       	adc	r31, r25
 29c:	10 81       	ld	r17, Z
				while(!((PINC & (1 << colunas)) >> colunas));	//debounce simples
 29e:	86 b1       	in	r24, 0x06	; 6
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	86 23       	and	r24, r22
 2a4:	97 23       	and	r25, r23
 2a6:	02 2e       	mov	r0, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <TecladoMatricial+0xd2>
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <TecladoMatricial+0xce>
 2b2:	89 2b       	or	r24, r25
 2b4:	a1 f3       	breq	.-24     	; 0x29e <TecladoMatricial+0xc2>
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <TecladoMatricial+0xe6>
			if(outras!= linha){							//verifica se outras é diferente de linha, se for
				PORTD |= (1 << outras);					//coloca as outras portas em HIGH
			}
		}
		//delay_ms(10);
		for (int colunas = 1; colunas <=3; colunas++){			//percorre todas as colunas
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255
 2bc:	24 30       	cpi	r18, 0x04	; 4
 2be:	31 05       	cpc	r19, r1
 2c0:	54 f2       	brlt	.-108    	; 0x256 <TecladoMatricial+0x7a>
										{'*','0', '#'},
									};
	char tecla_pressionada = ' ', teclaAnterior;
	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 2c2:	4f 5f       	subi	r20, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	44 30       	cpi	r20, 0x04	; 4
 2c8:	51 05       	cpc	r21, r1
 2ca:	0c f4       	brge	.+2      	; 0x2ce <TecladoMatricial+0xf2>
 2cc:	9f cf       	rjmp	.-194    	; 0x20c <TecladoMatricial+0x30>
				//delay_ms(5);
				break;
			}
		}
	}
	delay_ms(10);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	91 e4       	ldi	r25, 0x41	; 65
 2d6:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>

	return tecla_pressionada;
}
 2da:	81 2f       	mov	r24, r17
 2dc:	2c 96       	adiw	r28, 0x0c	; 12
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	08 95       	ret

000002f0 <main>:


int main(void)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	aa 97       	sbiw	r28, 0x2a	; 42
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
	//LCD
	DDRB = 0x03;
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 308:	80 ef       	ldi	r24, 0xF0	; 240
 30a:	8a b9       	out	0x0a, r24	; 10
	delay_ms(10);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	91 e4       	ldi	r25, 0x41	; 65
 314:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	
	LCD_init();
 318:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_init>
	delay_ms(10);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	91 e4       	ldi	r25, 0x41	; 65
 324:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	
	char teclasTelefone_3L [8][4] = { //[linhas][colunas]
 328:	fe 01       	movw	r30, r28
 32a:	31 96       	adiw	r30, 0x01	; 1
 32c:	80 e2       	ldi	r24, 0x20	; 32
 32e:	df 01       	movw	r26, r30
 330:	1d 92       	st	X+, r1
 332:	8a 95       	dec	r24
 334:	e9 f7       	brne	.-6      	; 0x330 <main+0x40>
 336:	82 e3       	ldi	r24, 0x32	; 50
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	8a 83       	std	Y+2, r24	; 0x02
 33e:	82 e4       	ldi	r24, 0x42	; 66
 340:	8b 83       	std	Y+3, r24	; 0x03
 342:	83 e4       	ldi	r24, 0x43	; 67
 344:	8c 83       	std	Y+4, r24	; 0x04
 346:	83 e3       	ldi	r24, 0x33	; 51
 348:	8d 83       	std	Y+5, r24	; 0x05
 34a:	84 e4       	ldi	r24, 0x44	; 68
 34c:	8e 83       	std	Y+6, r24	; 0x06
 34e:	85 e4       	ldi	r24, 0x45	; 69
 350:	8f 83       	std	Y+7, r24	; 0x07
 352:	86 e4       	ldi	r24, 0x46	; 70
 354:	88 87       	std	Y+8, r24	; 0x08
 356:	84 e3       	ldi	r24, 0x34	; 52
 358:	89 87       	std	Y+9, r24	; 0x09
 35a:	87 e4       	ldi	r24, 0x47	; 71
 35c:	8a 87       	std	Y+10, r24	; 0x0a
 35e:	88 e4       	ldi	r24, 0x48	; 72
 360:	8b 87       	std	Y+11, r24	; 0x0b
 362:	89 e4       	ldi	r24, 0x49	; 73
 364:	8c 87       	std	Y+12, r24	; 0x0c
 366:	85 e3       	ldi	r24, 0x35	; 53
 368:	8d 87       	std	Y+13, r24	; 0x0d
 36a:	8a e4       	ldi	r24, 0x4A	; 74
 36c:	8e 87       	std	Y+14, r24	; 0x0e
 36e:	8b e4       	ldi	r24, 0x4B	; 75
 370:	8f 87       	std	Y+15, r24	; 0x0f
 372:	8c e4       	ldi	r24, 0x4C	; 76
 374:	88 8b       	std	Y+16, r24	; 0x10
 376:	86 e3       	ldi	r24, 0x36	; 54
 378:	89 8b       	std	Y+17, r24	; 0x11
 37a:	8d e4       	ldi	r24, 0x4D	; 77
 37c:	8a 8b       	std	Y+18, r24	; 0x12
 37e:	8e e4       	ldi	r24, 0x4E	; 78
 380:	8b 8b       	std	Y+19, r24	; 0x13
 382:	8f e4       	ldi	r24, 0x4F	; 79
 384:	8c 8b       	std	Y+20, r24	; 0x14
 386:	88 e3       	ldi	r24, 0x38	; 56
 388:	8d 8b       	std	Y+21, r24	; 0x15
 38a:	84 e5       	ldi	r24, 0x54	; 84
 38c:	8e 8b       	std	Y+22, r24	; 0x16
 38e:	85 e5       	ldi	r24, 0x55	; 85
 390:	8f 8b       	std	Y+23, r24	; 0x17
 392:	86 e5       	ldi	r24, 0x56	; 86
 394:	88 8f       	std	Y+24, r24	; 0x18
		{'6', 'M', 'N', 'O'},	//linha 4
		{'8', 'T', 'U', 'V'},	//linha 5
	};	//fim de teclasTelefone_3L
		
		
	char teclasTelefone_4L [2][5] = { //[linhas][colunas]
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	ec e0       	ldi	r30, 0x0C	; 12
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	de 01       	movw	r26, r28
 39e:	91 96       	adiw	r26, 0x21	; 33
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0xb0>
	
	char nContagens = 0;
	char linhaM;
	char caracter;
	
	Keyboard_config();
 3a8:	0e 94 cf 00 	call	0x19e	; 0x19e <Keyboard_config>
	char teclaAnterior = '/';
 3ac:	0f 2e       	mov	r0, r31
 3ae:	ff e2       	ldi	r31, 0x2F	; 47
 3b0:	ff 2e       	mov	r15, r31
 3b2:	f0 2d       	mov	r31, r0
	char teclasTelefone_4L [2][5] = { //[linhas][colunas]
		{'7', 'P', 'Q', 'R', 'S'}, //linha 0
		{'9', 'W', 'X', 'Y', 'Z'}, //linha 1
	}; //fim de teclasTelefone_4L
	
	char nContagens = 0;
 3b4:	00 e0       	ldi	r16, 0x00	; 0
	char teclaAnterior = '/';
    /* Replace with your application code */
    while (1) 
    {
	
		char teclaAtual = TecladoMatricial();
 3b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <TecladoMatricial>
 3ba:	18 2f       	mov	r17, r24
	
		if(teclaAtual != ' '){
 3bc:	80 32       	cpi	r24, 0x20	; 32
 3be:	d9 f3       	breq	.-10     	; 0x3b6 <main+0xc6>
			if (teclaAtual == '1' || teclaAtual == '0' || teclaAtual == '*' || teclaAtual == '#')
 3c0:	80 ed       	ldi	r24, 0xD0	; 208
 3c2:	81 0f       	add	r24, r17
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	20 f0       	brcs	.+8      	; 0x3d0 <main+0xe0>
 3c8:	1a 32       	cpi	r17, 0x2A	; 42
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <main+0xe0>
 3cc:	13 32       	cpi	r17, 0x23	; 35
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <main+0xe8>
			{
				enviaChar(teclaAtual);
 3d0:	81 2f       	mov	r24, r17
 3d2:	0e 94 cb 00 	call	0x196	; 0x196 <enviaChar>
 3d6:	ef cf       	rjmp	.-34     	; 0x3b6 <main+0xc6>
			}//fecha o if tecla atual é 1, 0, #, *
			
			else{ //se não for 1, 0, # ou *
				
				if(teclaAtual == teclaAnterior){ //se a tecla pressionada for igual à pressionada anteriormente
 3d8:	f1 12       	cpse	r15, r17
 3da:	54 c0       	rjmp	.+168    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
					nContagens ++;	//incrementa o número de contagens
 3dc:	0f 5f       	subi	r16, 0xFF	; 255
					switch (teclaAtual){	//altera a linha da matriz conforme o número
 3de:	81 2f       	mov	r24, r17
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	f2 97       	sbiw	r30, 0x32	; 50
 3e6:	e8 30       	cpi	r30, 0x08	; 8
 3e8:	f1 05       	cpc	r31, r1
 3ea:	e8 f4       	brcc	.+58     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3ec:	ec 5c       	subi	r30, 0xCC	; 204
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	0c 94 82 03 	jmp	0x704	; 0x704 <__tablejump2__>
						case '2':
							linhaM = 0;
							break;
						case '3':
							linhaM = 1;
 3f4:	ee 24       	eor	r14, r14
 3f6:	e3 94       	inc	r14
							break;
 3f8:	16 c0       	rjmp	.+44     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
						case '4':
							linhaM = 2;
 3fa:	68 94       	set
 3fc:	ee 24       	eor	r14, r14
 3fe:	e1 f8       	bld	r14, 1
							break;
 400:	12 c0       	rjmp	.+36     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
						case '5':
							linhaM = 3;
 402:	0f 2e       	mov	r0, r31
 404:	f3 e0       	ldi	r31, 0x03	; 3
 406:	ef 2e       	mov	r14, r31
 408:	f0 2d       	mov	r31, r0
							break;
 40a:	0d c0       	rjmp	.+26     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
						case '6':
							linhaM = 4;
 40c:	68 94       	set
 40e:	ee 24       	eor	r14, r14
 410:	e2 f8       	bld	r14, 2
							break;
 412:	09 c0       	rjmp	.+18     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
						case '7':
							linhaM = 0;
							break;
						case '8':
							linhaM = 5;
 414:	0f 2e       	mov	r0, r31
 416:	f5 e0       	ldi	r31, 0x05	; 5
 418:	ef 2e       	mov	r14, r31
 41a:	f0 2d       	mov	r31, r0
							break;
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
						case '9':			//se a tecla pressionada for 9, vai pra segunda linha da matriz
							linhaM = 1;
 41e:	ee 24       	eor	r14, r14
 420:	e3 94       	inc	r14
							break;
 422:	01 c0       	rjmp	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
				
				if(teclaAtual == teclaAnterior){ //se a tecla pressionada for igual à pressionada anteriormente
					nContagens ++;	//incrementa o número de contagens
					switch (teclaAtual){	//altera a linha da matriz conforme o número
						case '2':
							linhaM = 0;
 424:	e1 2c       	mov	r14, r1
						case '9':			//se a tecla pressionada for 9, vai pra segunda linha da matriz
							linhaM = 1;
							break;
					}
					
					if (teclaAtual == '7' || teclaAtual == '9')	//se a tecla for 7 ou 9, percorre a matriz de 4 letras
 426:	17 33       	cpi	r17, 0x37	; 55
 428:	11 f0       	breq	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	19 33       	cpi	r17, 0x39	; 57
 42c:	b1 f4       	brne	.+44     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
					{
						if (nContagens == 5){	//se atingir o limite do tamanho da matriz zera o contador
 42e:	05 30       	cpi	r16, 0x05	; 5
 430:	09 f4       	brne	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
							nContagens = 0;
 432:	00 e0       	ldi	r16, 0x00	; 0
						}
						caracter = teclasTelefone_4L[linhaM][nContagens];
 434:	8e 2d       	mov	r24, r14
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	e8 0f       	add	r30, r24
 444:	f9 1f       	adc	r31, r25
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	8c 0f       	add	r24, r28
 44c:	9d 1f       	adc	r25, r29
 44e:	e8 0f       	add	r30, r24
 450:	f9 1f       	adc	r31, r25
 452:	e0 0f       	add	r30, r16
 454:	f1 1d       	adc	r31, r1
 456:	80 a1       	ldd	r24, Z+32	; 0x20
 458:	12 c0       	rjmp	.+36     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
					}	//fecha o if que verifica se a tecla é 7 ou 9
					
					else{ //se a tecla for 2,3,4,5,6, ou 8
						if (nContagens == 4){	//se atingir o limite do tamanho da matriz zera o contador
 45a:	04 30       	cpi	r16, 0x04	; 4
 45c:	09 f4       	brne	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
							nContagens = 0;
 45e:	00 e0       	ldi	r16, 0x00	; 0
						}
						caracter = teclasTelefone_3L[linhaM][nContagens];
 460:	ee 2d       	mov	r30, r14
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	a1 e0       	ldi	r26, 0x01	; 1
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	ac 0f       	add	r26, r28
 472:	bd 1f       	adc	r27, r29
 474:	ea 0f       	add	r30, r26
 476:	fb 1f       	adc	r31, r27
 478:	e0 0f       	add	r30, r16
 47a:	f1 1d       	adc	r31, r1
 47c:	80 81       	ld	r24, Z
					}
					
					enviaChar(caracter);
 47e:	0e 94 cb 00 	call	0x196	; 0x196 <enviaChar>
 482:	99 cf       	rjmp	.-206    	; 0x3b6 <main+0xc6>
					
				} //fecha o if teclaAtual == teclaAnterior
				else{
					nContagens = 0;
					teclaAnterior = teclaAtual;
					enviaChar(teclaAtual);
 484:	81 2f       	mov	r24, r17
 486:	0e 94 cb 00 	call	0x196	; 0x196 <enviaChar>
					enviaChar(caracter);
					
				} //fecha o if teclaAtual == teclaAnterior
				else{
					nContagens = 0;
					teclaAnterior = teclaAtual;
 48a:	f1 2e       	mov	r15, r17
					
					enviaChar(caracter);
					
				} //fecha o if teclaAtual == teclaAnterior
				else{
					nContagens = 0;
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	93 cf       	rjmp	.-218    	; 0x3b6 <main+0xc6>

00000490 <__fixunssfsi>:
 490:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_splitA>
 494:	88 f0       	brcs	.+34     	; 0x4b8 <__fixunssfsi+0x28>
 496:	9f 57       	subi	r25, 0x7F	; 127
 498:	98 f0       	brcs	.+38     	; 0x4c0 <__fixunssfsi+0x30>
 49a:	b9 2f       	mov	r27, r25
 49c:	99 27       	eor	r25, r25
 49e:	b7 51       	subi	r27, 0x17	; 23
 4a0:	b0 f0       	brcs	.+44     	; 0x4ce <__fixunssfsi+0x3e>
 4a2:	e1 f0       	breq	.+56     	; 0x4dc <__fixunssfsi+0x4c>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	1a f0       	brmi	.+6      	; 0x4b4 <__fixunssfsi+0x24>
 4ae:	ba 95       	dec	r27
 4b0:	c9 f7       	brne	.-14     	; 0x4a4 <__fixunssfsi+0x14>
 4b2:	14 c0       	rjmp	.+40     	; 0x4dc <__fixunssfsi+0x4c>
 4b4:	b1 30       	cpi	r27, 0x01	; 1
 4b6:	91 f0       	breq	.+36     	; 0x4dc <__fixunssfsi+0x4c>
 4b8:	0e 94 99 02 	call	0x532	; 0x532 <__fp_zero>
 4bc:	b1 e0       	ldi	r27, 0x01	; 1
 4be:	08 95       	ret
 4c0:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_zero>
 4c4:	67 2f       	mov	r22, r23
 4c6:	78 2f       	mov	r23, r24
 4c8:	88 27       	eor	r24, r24
 4ca:	b8 5f       	subi	r27, 0xF8	; 248
 4cc:	39 f0       	breq	.+14     	; 0x4dc <__fixunssfsi+0x4c>
 4ce:	b9 3f       	cpi	r27, 0xF9	; 249
 4d0:	cc f3       	brlt	.-14     	; 0x4c4 <__fixunssfsi+0x34>
 4d2:	86 95       	lsr	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b3 95       	inc	r27
 4da:	d9 f7       	brne	.-10     	; 0x4d2 <__fixunssfsi+0x42>
 4dc:	3e f4       	brtc	.+14     	; 0x4ec <__fixunssfsi+0x5c>
 4de:	90 95       	com	r25
 4e0:	80 95       	com	r24
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <__fp_split3>:
 4ee:	57 fd       	sbrc	r21, 7
 4f0:	90 58       	subi	r25, 0x80	; 128
 4f2:	44 0f       	add	r20, r20
 4f4:	55 1f       	adc	r21, r21
 4f6:	59 f0       	breq	.+22     	; 0x50e <__fp_splitA+0x10>
 4f8:	5f 3f       	cpi	r21, 0xFF	; 255
 4fa:	71 f0       	breq	.+28     	; 0x518 <__fp_splitA+0x1a>
 4fc:	47 95       	ror	r20

000004fe <__fp_splitA>:
 4fe:	88 0f       	add	r24, r24
 500:	97 fb       	bst	r25, 7
 502:	99 1f       	adc	r25, r25
 504:	61 f0       	breq	.+24     	; 0x51e <__fp_splitA+0x20>
 506:	9f 3f       	cpi	r25, 0xFF	; 255
 508:	79 f0       	breq	.+30     	; 0x528 <__fp_splitA+0x2a>
 50a:	87 95       	ror	r24
 50c:	08 95       	ret
 50e:	12 16       	cp	r1, r18
 510:	13 06       	cpc	r1, r19
 512:	14 06       	cpc	r1, r20
 514:	55 1f       	adc	r21, r21
 516:	f2 cf       	rjmp	.-28     	; 0x4fc <__fp_split3+0xe>
 518:	46 95       	lsr	r20
 51a:	f1 df       	rcall	.-30     	; 0x4fe <__fp_splitA>
 51c:	08 c0       	rjmp	.+16     	; 0x52e <__fp_splitA+0x30>
 51e:	16 16       	cp	r1, r22
 520:	17 06       	cpc	r1, r23
 522:	18 06       	cpc	r1, r24
 524:	99 1f       	adc	r25, r25
 526:	f1 cf       	rjmp	.-30     	; 0x50a <__fp_splitA+0xc>
 528:	86 95       	lsr	r24
 52a:	71 05       	cpc	r23, r1
 52c:	61 05       	cpc	r22, r1
 52e:	08 94       	sec
 530:	08 95       	ret

00000532 <__fp_zero>:
 532:	e8 94       	clt

00000534 <__fp_szero>:
 534:	bb 27       	eor	r27, r27
 536:	66 27       	eor	r22, r22
 538:	77 27       	eor	r23, r23
 53a:	cb 01       	movw	r24, r22
 53c:	97 f9       	bld	r25, 7
 53e:	08 95       	ret

00000540 <__mulsf3>:
 540:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3x>
 544:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__fp_round>
 548:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_pscA>
 54c:	38 f0       	brcs	.+14     	; 0x55c <__mulsf3+0x1c>
 54e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_pscB>
 552:	20 f0       	brcs	.+8      	; 0x55c <__mulsf3+0x1c>
 554:	95 23       	and	r25, r21
 556:	11 f0       	breq	.+4      	; 0x55c <__mulsf3+0x1c>
 558:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_inf>
 55c:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__fp_nan>
 560:	11 24       	eor	r1, r1
 562:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_szero>

00000566 <__mulsf3x>:
 566:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_split3>
 56a:	70 f3       	brcs	.-36     	; 0x548 <__mulsf3+0x8>

0000056c <__mulsf3_pse>:
 56c:	95 9f       	mul	r25, r21
 56e:	c1 f3       	breq	.-16     	; 0x560 <__mulsf3+0x20>
 570:	95 0f       	add	r25, r21
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	55 1f       	adc	r21, r21
 576:	62 9f       	mul	r22, r18
 578:	f0 01       	movw	r30, r0
 57a:	72 9f       	mul	r23, r18
 57c:	bb 27       	eor	r27, r27
 57e:	f0 0d       	add	r31, r0
 580:	b1 1d       	adc	r27, r1
 582:	63 9f       	mul	r22, r19
 584:	aa 27       	eor	r26, r26
 586:	f0 0d       	add	r31, r0
 588:	b1 1d       	adc	r27, r1
 58a:	aa 1f       	adc	r26, r26
 58c:	64 9f       	mul	r22, r20
 58e:	66 27       	eor	r22, r22
 590:	b0 0d       	add	r27, r0
 592:	a1 1d       	adc	r26, r1
 594:	66 1f       	adc	r22, r22
 596:	82 9f       	mul	r24, r18
 598:	22 27       	eor	r18, r18
 59a:	b0 0d       	add	r27, r0
 59c:	a1 1d       	adc	r26, r1
 59e:	62 1f       	adc	r22, r18
 5a0:	73 9f       	mul	r23, r19
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	62 1f       	adc	r22, r18
 5a8:	83 9f       	mul	r24, r19
 5aa:	a0 0d       	add	r26, r0
 5ac:	61 1d       	adc	r22, r1
 5ae:	22 1f       	adc	r18, r18
 5b0:	74 9f       	mul	r23, r20
 5b2:	33 27       	eor	r19, r19
 5b4:	a0 0d       	add	r26, r0
 5b6:	61 1d       	adc	r22, r1
 5b8:	23 1f       	adc	r18, r19
 5ba:	84 9f       	mul	r24, r20
 5bc:	60 0d       	add	r22, r0
 5be:	21 1d       	adc	r18, r1
 5c0:	82 2f       	mov	r24, r18
 5c2:	76 2f       	mov	r23, r22
 5c4:	6a 2f       	mov	r22, r26
 5c6:	11 24       	eor	r1, r1
 5c8:	9f 57       	subi	r25, 0x7F	; 127
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	9a f0       	brmi	.+38     	; 0x5f4 <__mulsf3_pse+0x88>
 5ce:	f1 f0       	breq	.+60     	; 0x60c <__mulsf3_pse+0xa0>
 5d0:	88 23       	and	r24, r24
 5d2:	4a f0       	brmi	.+18     	; 0x5e6 <__mulsf3_pse+0x7a>
 5d4:	ee 0f       	add	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	bb 1f       	adc	r27, r27
 5da:	66 1f       	adc	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	91 50       	subi	r25, 0x01	; 1
 5e2:	50 40       	sbci	r21, 0x00	; 0
 5e4:	a9 f7       	brne	.-22     	; 0x5d0 <__mulsf3_pse+0x64>
 5e6:	9e 3f       	cpi	r25, 0xFE	; 254
 5e8:	51 05       	cpc	r21, r1
 5ea:	80 f0       	brcs	.+32     	; 0x60c <__mulsf3_pse+0xa0>
 5ec:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_inf>
 5f0:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_szero>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	e4 f3       	brlt	.-8      	; 0x5f0 <__mulsf3_pse+0x84>
 5f8:	98 3e       	cpi	r25, 0xE8	; 232
 5fa:	d4 f3       	brlt	.-12     	; 0x5f0 <__mulsf3_pse+0x84>
 5fc:	86 95       	lsr	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	f7 95       	ror	r31
 606:	e7 95       	ror	r30
 608:	9f 5f       	subi	r25, 0xFF	; 255
 60a:	c1 f7       	brne	.-16     	; 0x5fc <__mulsf3_pse+0x90>
 60c:	fe 2b       	or	r31, r30
 60e:	88 0f       	add	r24, r24
 610:	91 1d       	adc	r25, r1
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <round>:
 61a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_splitA>
 61e:	e8 f0       	brcs	.+58     	; 0x65a <round+0x40>
 620:	9e 37       	cpi	r25, 0x7E	; 126
 622:	e8 f0       	brcs	.+58     	; 0x65e <round+0x44>
 624:	96 39       	cpi	r25, 0x96	; 150
 626:	b8 f4       	brcc	.+46     	; 0x656 <round+0x3c>
 628:	9e 38       	cpi	r25, 0x8E	; 142
 62a:	48 f4       	brcc	.+18     	; 0x63e <round+0x24>
 62c:	67 2f       	mov	r22, r23
 62e:	78 2f       	mov	r23, r24
 630:	88 27       	eor	r24, r24
 632:	98 5f       	subi	r25, 0xF8	; 248
 634:	f9 cf       	rjmp	.-14     	; 0x628 <round+0xe>
 636:	86 95       	lsr	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	93 95       	inc	r25
 63e:	95 39       	cpi	r25, 0x95	; 149
 640:	d0 f3       	brcs	.-12     	; 0x636 <round+0x1c>
 642:	b6 2f       	mov	r27, r22
 644:	b1 70       	andi	r27, 0x01	; 1
 646:	6b 0f       	add	r22, r27
 648:	71 1d       	adc	r23, r1
 64a:	81 1d       	adc	r24, r1
 64c:	20 f4       	brcc	.+8      	; 0x656 <round+0x3c>
 64e:	87 95       	ror	r24
 650:	77 95       	ror	r23
 652:	67 95       	ror	r22
 654:	93 95       	inc	r25
 656:	0c 94 37 03 	jmp	0x66e	; 0x66e <__fp_mintl>
 65a:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_mpack>
 65e:	0c 94 9a 02 	jmp	0x534	; 0x534 <__fp_szero>

00000662 <__fp_inf>:
 662:	97 f9       	bld	r25, 7
 664:	9f 67       	ori	r25, 0x7F	; 127
 666:	80 e8       	ldi	r24, 0x80	; 128
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	08 95       	ret

0000066e <__fp_mintl>:
 66e:	88 23       	and	r24, r24
 670:	71 f4       	brne	.+28     	; 0x68e <__fp_mintl+0x20>
 672:	77 23       	and	r23, r23
 674:	21 f0       	breq	.+8      	; 0x67e <__fp_mintl+0x10>
 676:	98 50       	subi	r25, 0x08	; 8
 678:	87 2b       	or	r24, r23
 67a:	76 2f       	mov	r23, r22
 67c:	07 c0       	rjmp	.+14     	; 0x68c <__fp_mintl+0x1e>
 67e:	66 23       	and	r22, r22
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_mintl+0x18>
 682:	99 27       	eor	r25, r25
 684:	0d c0       	rjmp	.+26     	; 0x6a0 <__fp_mintl+0x32>
 686:	90 51       	subi	r25, 0x10	; 16
 688:	86 2b       	or	r24, r22
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	2a f0       	brmi	.+10     	; 0x69a <__fp_mintl+0x2c>
 690:	9a 95       	dec	r25
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	da f7       	brpl	.-10     	; 0x690 <__fp_mintl+0x22>
 69a:	88 0f       	add	r24, r24
 69c:	96 95       	lsr	r25
 69e:	87 95       	ror	r24
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <__fp_mpack>:
 6a4:	9f 3f       	cpi	r25, 0xFF	; 255
 6a6:	31 f0       	breq	.+12     	; 0x6b4 <__fp_mpack_finite+0xc>

000006a8 <__fp_mpack_finite>:
 6a8:	91 50       	subi	r25, 0x01	; 1
 6aa:	20 f4       	brcc	.+8      	; 0x6b4 <__fp_mpack_finite+0xc>
 6ac:	87 95       	ror	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	88 0f       	add	r24, r24
 6b6:	91 1d       	adc	r25, r1
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	97 f9       	bld	r25, 7
 6be:	08 95       	ret

000006c0 <__fp_nan>:
 6c0:	9f ef       	ldi	r25, 0xFF	; 255
 6c2:	80 ec       	ldi	r24, 0xC0	; 192
 6c4:	08 95       	ret

000006c6 <__fp_pscA>:
 6c6:	00 24       	eor	r0, r0
 6c8:	0a 94       	dec	r0
 6ca:	16 16       	cp	r1, r22
 6cc:	17 06       	cpc	r1, r23
 6ce:	18 06       	cpc	r1, r24
 6d0:	09 06       	cpc	r0, r25
 6d2:	08 95       	ret

000006d4 <__fp_pscB>:
 6d4:	00 24       	eor	r0, r0
 6d6:	0a 94       	dec	r0
 6d8:	12 16       	cp	r1, r18
 6da:	13 06       	cpc	r1, r19
 6dc:	14 06       	cpc	r1, r20
 6de:	05 06       	cpc	r0, r21
 6e0:	08 95       	ret

000006e2 <__fp_round>:
 6e2:	09 2e       	mov	r0, r25
 6e4:	03 94       	inc	r0
 6e6:	00 0c       	add	r0, r0
 6e8:	11 f4       	brne	.+4      	; 0x6ee <__fp_round+0xc>
 6ea:	88 23       	and	r24, r24
 6ec:	52 f0       	brmi	.+20     	; 0x702 <__fp_round+0x20>
 6ee:	bb 0f       	add	r27, r27
 6f0:	40 f4       	brcc	.+16     	; 0x702 <__fp_round+0x20>
 6f2:	bf 2b       	or	r27, r31
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__fp_round+0x18>
 6f6:	60 ff       	sbrs	r22, 0
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <__fp_round+0x20>
 6fa:	6f 5f       	subi	r22, 0xFF	; 255
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__tablejump2__>:
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	05 90       	lpm	r0, Z+
 70a:	f4 91       	lpm	r31, Z
 70c:	e0 2d       	mov	r30, r0
 70e:	09 94       	ijmp

00000710 <_exit>:
 710:	f8 94       	cli

00000712 <__stop_program>:
 712:	ff cf       	rjmp	.-2      	; 0x712 <__stop_program>
