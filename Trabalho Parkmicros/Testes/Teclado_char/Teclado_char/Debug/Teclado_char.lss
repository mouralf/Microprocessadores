
Teclado_char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000262  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000478  00000000  00000000  000014cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026e  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 24 01 	call	0x248	; 0x248 <main>
  8e:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_control>:
	unsigned char n_contagem = round(tempo_ms/64*1000);		//número de contagens arredondado
	OCR0A = n_contagem;										//Valor de comparação 3 contagens (1,66 ms)
	
	TIFR0 = (1 << 1);										//limpa flag de comparacao A
	while((TIFR0 & (1 << 1)) == 0);
}
  96:	61 30       	cpi	r22, 0x01	; 1
  98:	21 f4       	brne	.+8      	; 0xa2 <LCD_control+0xc>
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	91 60       	ori	r25, 0x01	; 1
  9e:	95 b9       	out	0x05, r25	; 5
  a0:	05 c0       	rjmp	.+10     	; 0xac <LCD_control+0x16>
  a2:	61 11       	cpse	r22, r1
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCD_control+0x16>
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	9e 7f       	andi	r25, 0xFE	; 254
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	28 2f       	mov	r18, r24
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	92 2b       	or	r25, r18
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	92 60       	ori	r25, 0x02	; 2
  c0:	95 b9       	out	0x05, r25	; 5
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	9d 7f       	andi	r25, 0xFD	; 253
  c6:	95 b9       	out	0x05, r25	; 5
  c8:	9b b1       	in	r25, 0x0b	; 11
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	9b b9       	out	0x0b, r25	; 11
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	82 95       	swap	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	89 2b       	or	r24, r25
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 b9       	out	0x05, r24	; 5
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <LCD_init>:
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	84 b9       	out	0x04, r24	; 4
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 122:	08 95       	ret

00000124 <enviaChar>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_control>
 12a:	08 95       	ret

0000012c <Keyboard_config>:
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	8a b9       	out	0x0a, r24	; 10
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8a b9       	out	0x0a, r24	; 10
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	8a b9       	out	0x0a, r24	; 10
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	88 60       	ori	r24, 0x08	; 8
 142:	8a b9       	out	0x0a, r24	; 10
 144:	87 b1       	in	r24, 0x07	; 7
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	87 b9       	out	0x07, r24	; 7
 14a:	87 b1       	in	r24, 0x07	; 7
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	87 b9       	out	0x07, r24	; 7
 150:	87 b1       	in	r24, 0x07	; 7
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	87 b9       	out	0x07, r24	; 7
 156:	88 b1       	in	r24, 0x08	; 8
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	88 b9       	out	0x08, r24	; 8
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	88 b9       	out	0x08, r24	; 8
 162:	88 b1       	in	r24, 0x08	; 8
 164:	88 60       	ori	r24, 0x08	; 8
 166:	88 b9       	out	0x08, r24	; 8
 168:	08 95       	ret

0000016a <Keyboard_validation>:
								{'4','5', '6'},
								{'7','8', '9'},
								{'*','0', '#'},
							};

char Keyboard_validation(){
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	5b c0       	rjmp	.+182    	; 0x232 <Keyboard_validation+0xc8>
		PORTD &= ~(1 << linha);							//coloca o pino referente à linha em LOW
 17c:	2b b1       	in	r18, 0x0b	; 11
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0c 2e       	mov	r0, r28
 184:	02 c0       	rjmp	.+4      	; 0x18a <Keyboard_validation+0x20>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Keyboard_validation+0x1c>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b b9       	out	0x0b, r24	; 11
		for (int outras = 0; outras<4; outras++){		//percorre novamente todas as linhas
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	10 c0       	rjmp	.+32     	; 0x1ba <Keyboard_validation+0x50>
			if(outras!= linha){							//verifica se outras é diferente de linha, se for
 19a:	c2 17       	cp	r28, r18
 19c:	d3 07       	cpc	r29, r19
 19e:	59 f0       	breq	.+22     	; 0x1b6 <Keyboard_validation+0x4c>
				PORTD |= (1<<outras);					//coloca as outras portas em HIGH
 1a0:	4b b1       	in	r20, 0x0b	; 11
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Keyboard_validation+0x44>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Keyboard_validation+0x40>
 1b2:	84 2b       	or	r24, r20
 1b4:	8b b9       	out	0x0b, r24	; 11

char Keyboard_validation(){
	
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
		PORTD &= ~(1 << linha);							//coloca o pino referente à linha em LOW
		for (int outras = 0; outras<4; outras++){		//percorre novamente todas as linhas
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	24 30       	cpi	r18, 0x04	; 4
 1bc:	31 05       	cpc	r19, r1
 1be:	6c f3       	brlt	.-38     	; 0x19a <Keyboard_validation+0x30>
 1c0:	01 e0       	ldi	r16, 0x01	; 1
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	32 c0       	rjmp	.+100    	; 0x22a <Keyboard_validation+0xc0>
				PORTD |= (1<<outras);					//coloca as outras portas em HIGH
			}
		}
		//delay_ms(10);
		for (int colunas = 1; colunas <=3; colunas++){			//percorre todas as colunas
			if(!((PINC & (1 << colunas)) >> colunas)){			//se a coluna em questão for LOW, então significa que foi pressionada
 1c6:	86 b1       	in	r24, 0x06	; 6
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	79 01       	movw	r14, r18
 1ce:	00 2e       	mov	r0, r16
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Keyboard_validation+0x6c>
 1d2:	ee 0c       	add	r14, r14
 1d4:	ff 1c       	adc	r15, r15
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Keyboard_validation+0x68>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	8e 21       	and	r24, r14
 1de:	9f 21       	and	r25, r15
 1e0:	00 2e       	mov	r0, r16
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Keyboard_validation+0x7e>
 1e4:	95 95       	asr	r25
 1e6:	87 95       	ror	r24
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Keyboard_validation+0x7a>
 1ec:	89 2b       	or	r24, r25
 1ee:	d9 f4       	brne	.+54     	; 0x226 <Keyboard_validation+0xbc>
				
				//LCD_control(LCD_CLR, CNFG);
				
				enviaChar(tecla[linha][colunas-1]);
 1f0:	fe 01       	movw	r30, r28
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	e0 50       	subi	r30, 0x00	; 0
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	c8 01       	movw	r24, r16
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	e8 0f       	add	r30, r24
 204:	f9 1f       	adc	r31, r25
 206:	80 81       	ld	r24, Z
 208:	0e 94 92 00 	call	0x124	; 0x124 <enviaChar>
				while(!((PINC & (1 << colunas)) >> colunas));	//debounce simples
 20c:	86 b1       	in	r24, 0x06	; 6
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	8e 21       	and	r24, r14
 212:	9f 21       	and	r25, r15
 214:	00 2e       	mov	r0, r16
 216:	02 c0       	rjmp	.+4      	; 0x21c <Keyboard_validation+0xb2>
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Keyboard_validation+0xae>
 220:	89 2b       	or	r24, r25
 222:	a1 f3       	breq	.-24     	; 0x20c <Keyboard_validation+0xa2>
 224:	05 c0       	rjmp	.+10     	; 0x230 <Keyboard_validation+0xc6>
			if(outras!= linha){							//verifica se outras é diferente de linha, se for
				PORTD |= (1<<outras);					//coloca as outras portas em HIGH
			}
		}
		//delay_ms(10);
		for (int colunas = 1; colunas <=3; colunas++){			//percorre todas as colunas
 226:	0f 5f       	subi	r16, 0xFF	; 255
 228:	1f 4f       	sbci	r17, 0xFF	; 255
 22a:	04 30       	cpi	r16, 0x04	; 4
 22c:	11 05       	cpc	r17, r1
 22e:	5c f2       	brlt	.-106    	; 0x1c6 <Keyboard_validation+0x5c>
								{'*','0', '#'},
							};

char Keyboard_validation(){
	
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	c4 30       	cpi	r28, 0x04	; 4
 234:	d1 05       	cpc	r29, r1
 236:	0c f4       	brge	.+2      	; 0x23a <Keyboard_validation+0xd0>
 238:	a1 cf       	rjmp	.-190    	; 0x17c <Keyboard_validation+0x12>
		}
		
	}
	delay_lcd();
	
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	08 95       	ret

00000248 <main>:

int main(void)
{
	//LCD
	DDRB = 0x03;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 24c:	80 ef       	ldi	r24, 0xF0	; 240
 24e:	8a b9       	out	0x0a, r24	; 10
	delay_lcd();
	
	LCD_init();
 250:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_init>
	delay_lcd();
	
	
	Keyboard_config();
 254:	0e 94 96 00 	call	0x12c	; 0x12c <Keyboard_config>

    /* Replace with your application code */
    while (1) 
    {
		Keyboard_validation();
 258:	0e 94 b5 00 	call	0x16a	; 0x16a <Keyboard_validation>
 25c:	fd cf       	rjmp	.-6      	; 0x258 <main+0x10>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
