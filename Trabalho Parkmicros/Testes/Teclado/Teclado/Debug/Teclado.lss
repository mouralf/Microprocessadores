
Teclado.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000939  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fa  00000000  00000000  00000c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000425  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000204  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 02 01 	call	0x204	; 0x204 <main>
  78:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	21 f4       	brne	.+8      	; 0x8c <LCD_control+0xc>
  84:	95 b1       	in	r25, 0x05	; 5
  86:	91 60       	ori	r25, 0x01	; 1
  88:	95 b9       	out	0x05, r25	; 5
  8a:	05 c0       	rjmp	.+10     	; 0x96 <LCD_control+0x16>
  8c:	61 11       	cpse	r22, r1
  8e:	03 c0       	rjmp	.+6      	; 0x96 <LCD_control+0x16>
  90:	95 b1       	in	r25, 0x05	; 5
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	95 b9       	out	0x05, r25	; 5
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	9b b1       	in	r25, 0x0b	; 11
  9e:	28 2f       	mov	r18, r24
  a0:	20 7f       	andi	r18, 0xF0	; 240
  a2:	92 2b       	or	r25, r18
  a4:	9b b9       	out	0x0b, r25	; 11
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	92 60       	ori	r25, 0x02	; 2
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	9d 7f       	andi	r25, 0xFD	; 253
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	82 95       	swap	r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	89 2b       	or	r24, r25
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <LCD_init>:
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 6f       	ori	r24, 0xF0	; 240
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 10c:	08 95       	ret

0000010e <enviaInt>:
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 5d       	subi	r24, 0xD0	; 208
 112:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 116:	08 95       	ret

00000118 <Keyboard_config>:
#define COLUNA2 PC2	//A2
#define COLUNA3 PC3	//A3
	
void Keyboard_config(){
	//configura as linhas como saída
	DDRD |= (1 << DDD0); //set PD0 as OUTPUT
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1); //set PD1 as OUTPUT
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	82 60       	ori	r24, 0x02	; 2
 122:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD2); //set PD2 as OUTPUT
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	84 60       	ori	r24, 0x04	; 4
 128:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD3); //set PD3 as OUTPUT
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	8a b9       	out	0x0a, r24	; 10
	
	//configura as colunas como entrada
	DDRC &= ~(1 << DDC1); //set PC1 as INPUT
 130:	87 b1       	in	r24, 0x07	; 7
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC2); //set PC2 as INPUT
 136:	87 b1       	in	r24, 0x07	; 7
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC3); //set PC3 as INPUT
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	87 b9       	out	0x07, r24	; 7
	
	//configura as resistências de  pull_up das colunas
	PORTC |= (1 << COLUNA1); //set PC1 as INPUT_PULLUP
 142:	88 b1       	in	r24, 0x08	; 8
 144:	82 60       	ori	r24, 0x02	; 2
 146:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA2); //set PC2 as INPUT_PULLUP
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA3); //set PC3 as INPUT_PULLUP
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	88 60       	ori	r24, 0x08	; 8
 152:	88 b9       	out	0x08, r24	; 8
 154:	08 95       	ret

00000156 <Keyboard_validation>:
}

void Keyboard_validation(){	
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	if(!((PINC &  (1 <<  COLUNA3)) >> COLUNA3)){
		enviaChar('#');
	}
	
	*/
	for (int LINHA = 0; LINHA<4; LINHA++){
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	47 c0       	rjmp	.+142    	; 0x1f2 <Keyboard_validation+0x9c>
		PORTD &= ~(1 << LINHA); //coloca o pino referente a LINHA em LOW
 164:	2b b1       	in	r18, 0x0b	; 11
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0c 2e       	mov	r0, r28
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Keyboard_validation+0x1c>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <Keyboard_validation+0x18>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	8b b9       	out	0x0b, r24	; 11
		for (int OUTRAS = 0; OUTRAS<4; OUTRAS++){
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	10 c0       	rjmp	.+32     	; 0x1a2 <Keyboard_validation+0x4c>
			if(OUTRAS!= LINHA){
 182:	c2 17       	cp	r28, r18
 184:	d3 07       	cpc	r29, r19
 186:	59 f0       	breq	.+22     	; 0x19e <Keyboard_validation+0x48>
				PORTD |= (1<<OUTRAS); //coloca as outras portas em HIGH
 188:	4b b1       	in	r20, 0x0b	; 11
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 2e       	mov	r0, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <Keyboard_validation+0x40>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <Keyboard_validation+0x3c>
 19a:	84 2b       	or	r24, r20
 19c:	8b b9       	out	0x0b, r24	; 11
	}
	
	*/
	for (int LINHA = 0; LINHA<4; LINHA++){
		PORTD &= ~(1 << LINHA); //coloca o pino referente a LINHA em LOW
		for (int OUTRAS = 0; OUTRAS<4; OUTRAS++){
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	24 30       	cpi	r18, 0x04	; 4
 1a4:	31 05       	cpc	r19, r1
 1a6:	6c f3       	brlt	.-38     	; 0x182 <Keyboard_validation+0x2c>
 1a8:	01 e0       	ldi	r16, 0x01	; 1
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	1e c0       	rjmp	.+60     	; 0x1ea <Keyboard_validation+0x94>
				PORTD |= (1<<OUTRAS); //coloca as outras portas em HIGH
			}
		}
		
		for (int COLUNAS = 1; COLUNAS <=3; COLUNAS++){
			if(!((PINC & (1 << COLUNAS)) >> COLUNAS)){
 1ae:	46 b1       	in	r20, 0x06	; 6
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	9c 01       	movw	r18, r24
 1b6:	00 2e       	mov	r0, r16
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <Keyboard_validation+0x68>
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Keyboard_validation+0x64>
 1c2:	84 2f       	mov	r24, r20
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	82 23       	and	r24, r18
 1c8:	93 23       	and	r25, r19
 1ca:	00 2e       	mov	r0, r16
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <Keyboard_validation+0x7c>
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <Keyboard_validation+0x78>
 1d6:	89 2b       	or	r24, r25
 1d8:	31 f4       	brne	.+12     	; 0x1e6 <Keyboard_validation+0x90>
				enviaInt(LINHA);
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 87 00 	call	0x10e	; 0x10e <enviaInt>
				enviaInt(COLUNAS);
 1e0:	c8 01       	movw	r24, r16
 1e2:	0e 94 87 00 	call	0x10e	; 0x10e <enviaInt>
			if(OUTRAS!= LINHA){
				PORTD |= (1<<OUTRAS); //coloca as outras portas em HIGH
			}
		}
		
		for (int COLUNAS = 1; COLUNAS <=3; COLUNAS++){
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	04 30       	cpi	r16, 0x04	; 4
 1ec:	11 05       	cpc	r17, r1
 1ee:	fc f2       	brlt	.-66     	; 0x1ae <Keyboard_validation+0x58>
	if(!((PINC &  (1 <<  COLUNA3)) >> COLUNA3)){
		enviaChar('#');
	}
	
	*/
	for (int LINHA = 0; LINHA<4; LINHA++){
 1f0:	21 96       	adiw	r28, 0x01	; 1
 1f2:	c4 30       	cpi	r28, 0x04	; 4
 1f4:	d1 05       	cpc	r29, r1
 1f6:	0c f4       	brge	.+2      	; 0x1fa <Keyboard_validation+0xa4>
 1f8:	b5 cf       	rjmp	.-150    	; 0x164 <Keyboard_validation+0xe>
		}
		*/
	}
	delay_lcd();
	
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <main>:

int main(void)
{
	//LCD
	DDRB = 0x03;
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 208:	80 ef       	ldi	r24, 0xF0	; 240
 20a:	8a b9       	out	0x0a, r24	; 10
	delay_lcd();
	
	LCD_init();
 20c:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_init>
	delay_lcd();
	
	
	Keyboard_config();
 210:	0e 94 8c 00 	call	0x118	; 0x118 <Keyboard_config>
	
	//PORTC = 0xFF;
    /* Replace with your application code */
    while (1) 
    {
		Keyboard_validation();
 214:	0e 94 ab 00 	call	0x156	; 0x156 <Keyboard_validation>
 218:	fd cf       	rjmp	.-6      	; 0x214 <main+0x10>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
