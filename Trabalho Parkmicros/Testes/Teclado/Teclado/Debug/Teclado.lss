
Teclado.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f8  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e9  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  00001b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	21 f4       	brne	.+8      	; 0x8c <LCD_control+0xc>
  84:	95 b1       	in	r25, 0x05	; 5
  86:	91 60       	ori	r25, 0x01	; 1
  88:	95 b9       	out	0x05, r25	; 5
  8a:	05 c0       	rjmp	.+10     	; 0x96 <LCD_control+0x16>
  8c:	61 11       	cpse	r22, r1
  8e:	03 c0       	rjmp	.+6      	; 0x96 <LCD_control+0x16>
  90:	95 b1       	in	r25, 0x05	; 5
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	95 b9       	out	0x05, r25	; 5
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	9b b1       	in	r25, 0x0b	; 11
  9e:	28 2f       	mov	r18, r24
  a0:	20 7f       	andi	r18, 0xF0	; 240
  a2:	92 2b       	or	r25, r18
  a4:	9b b9       	out	0x0b, r25	; 11
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	92 60       	ori	r25, 0x02	; 2
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	9d 7f       	andi	r25, 0xFD	; 253
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	82 95       	swap	r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	89 2b       	or	r24, r25
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <LCD_init>:
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 6f       	ori	r24, 0xF0	; 240
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 10c:	08 95       	ret

0000010e <enviaChar>:
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 114:	08 95       	ret

00000116 <enviaInt>:
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	80 5d       	subi	r24, 0xD0	; 208
 11a:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 11e:	08 95       	ret

00000120 <Keyboard_config>:
#define COLUNA2 PC2	//A2
#define COLUNA3 PC3	//A3
	
void Keyboard_config(){
	//configura as linhas como saída
	DDRD |= (1 << DDD0); //set PD0 as OUTPUT
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	81 60       	ori	r24, 0x01	; 1
 124:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1); //set PD1 as OUTPUT
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD2); //set PD2 as OUTPUT
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD3); //set PD3 as OUTPUT
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	88 60       	ori	r24, 0x08	; 8
 136:	8a b9       	out	0x0a, r24	; 10
	
	//configura as colunas como entrada
	DDRC &= ~(1 << DDC1); //set PC1 as INPUT
 138:	87 b1       	in	r24, 0x07	; 7
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC2); //set PC2 as INPUT
 13e:	87 b1       	in	r24, 0x07	; 7
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC3); //set PC3 as INPUT
 144:	87 b1       	in	r24, 0x07	; 7
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	87 b9       	out	0x07, r24	; 7
	
	//configura as resistências de  pull_up das colunas
	PORTC |= (1 << COLUNA1); //set PC1 as INPUT_PULLUP
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA2); //set PC2 as INPUT_PULLUP
 150:	88 b1       	in	r24, 0x08	; 8
 152:	84 60       	ori	r24, 0x04	; 4
 154:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA3); //set PC3 as INPUT_PULLUP
 156:	88 b1       	in	r24, 0x08	; 8
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	88 b9       	out	0x08, r24	; 8
 15c:	08 95       	ret

0000015e <Keyboard_validation>:

void Keyboard_validation(){	
	//uint8_t contador = 1;
	
	//coloca as linhas em estado LOW (exceto a LINHA1)
	PORTD |=	(1 << LINHA1);		//PD0 = 1
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	81 60       	ori	r24, 0x01	; 1
 162:	8b b9       	out	0x0b, r24	; 11
	PORTD |=	(1 << LINHA2);		//PD1 = 1
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	82 60       	ori	r24, 0x02	; 2
 168:	8b b9       	out	0x0b, r24	; 11
	PORTD |=	(1 << LINHA3);		//PD2 = 1
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ (1 << LINHA4);		//PD3 = 0	
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	8b b9       	out	0x0b, r24	; 11
	//enviaChar('L');
	//enviaInt(1);
	
	if(!((PINC &  (1 <<  COLUNA1)) >> COLUNA1)){
 176:	31 99       	sbic	0x06, 1	; 6
 178:	03 c0       	rjmp	.+6      	; 0x180 <Keyboard_validation+0x22>
		enviaChar('*');
 17a:	8a e2       	ldi	r24, 0x2A	; 42
 17c:	0e 94 87 00 	call	0x10e	; 0x10e <enviaChar>
	}
	
	if(!((PINC &  (1 <<  COLUNA2)) >> COLUNA2)){
 180:	32 99       	sbic	0x06, 2	; 6
 182:	04 c0       	rjmp	.+8      	; 0x18c <Keyboard_validation+0x2e>
		enviaInt(0);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 8b 00 	call	0x116	; 0x116 <enviaInt>
	}
	
	if(!((PINC &  (1 <<  COLUNA3)) >> COLUNA3)){
 18c:	33 99       	sbic	0x06, 3	; 6
 18e:	03 c0       	rjmp	.+6      	; 0x196 <Keyboard_validation+0x38>
		enviaChar('#');
 190:	83 e2       	ldi	r24, 0x23	; 35
 192:	0e 94 87 00 	call	0x10e	; 0x10e <enviaChar>
 196:	08 95       	ret

00000198 <main>:
}

int main(void)
{
	//LCD
	DDRB = 0x03;
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	8a b9       	out	0x0a, r24	; 10
	delay_lcd();
	
	LCD_init();
 1a0:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_init>
	delay_lcd();
	
	
	Keyboard_config();
 1a4:	0e 94 90 00 	call	0x120	; 0x120 <Keyboard_config>
	
	//PORTC = 0xFF;
    /* Replace with your application code */
    while (1) 
    {
		Keyboard_validation();
 1a8:	0e 94 af 00 	call	0x15e	; 0x15e <Keyboard_validation>
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0x10>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
