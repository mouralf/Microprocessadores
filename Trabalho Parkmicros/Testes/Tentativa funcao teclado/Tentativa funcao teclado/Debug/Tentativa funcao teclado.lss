
Tentativa funcao teclado.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  000007e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6a  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000549  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ec  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 47 02 	call	0x48e	; 0x48e <main>
  9e:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:
	LCD_control(LCD_NO_SHIFT, 0);	//configura o display pra deslocar o cursor pra esquerda
	LCD_control(c, 1);    //envia o char c

}
void enviaInt(int c){
	LCD_control(c+48, 1); //soma 48 para ser o numero em char da tabela ascii
  a6:	cf 93       	push	r28
  a8:	c2 e0       	ldi	r28, 0x02	; 2
  aa:	c4 bd       	out	0x24, r28	; 36
  ac:	25 e0       	ldi	r18, 0x05	; 5
  ae:	25 bd       	out	0x25, r18	; 37
  b0:	16 bc       	out	0x26, r1	; 38
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	40 e8       	ldi	r20, 0x80	; 128
  b8:	5c e3       	ldi	r21, 0x3C	; 60
  ba:	0e 94 ba 02 	call	0x574	; 0x574 <__mulsf3>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	4a e7       	ldi	r20, 0x7A	; 122
  c4:	54 e4       	ldi	r21, 0x44	; 68
  c6:	0e 94 ba 02 	call	0x574	; 0x574 <__mulsf3>
  ca:	0e 94 27 03 	call	0x64e	; 0x64e <round>
  ce:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fixunssfsi>
  d2:	67 bd       	out	0x27, r22	; 39
  d4:	c5 bb       	out	0x15, r28	; 21
  d6:	a9 9b       	sbis	0x15, 1	; 21
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <delay_ms+0x30>
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <LCD_control>:
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	21 f4       	brne	.+8      	; 0xee <LCD_control+0x10>
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <LCD_control+0x1a>
  ee:	61 11       	cpse	r22, r1
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <LCD_control+0x1a>
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8e 7f       	andi	r24, 0xFE	; 254
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	9c 2f       	mov	r25, r28
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	89 2b       	or	r24, r25
 106:	8b b9       	out	0x0b, r24	; 11
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8d 7f       	andi	r24, 0xFD	; 253
 112:	85 b9       	out	0x05, r24	; 5
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	91 e4       	ldi	r25, 0x41	; 65
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	8b b9       	out	0x0b, r24	; 11
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	c2 95       	swap	r28
 12a:	c0 7f       	andi	r28, 0xF0	; 240
 12c:	c8 2b       	or	r28, r24
 12e:	cb b9       	out	0x0b, r28	; 11
 130:	85 b1       	in	r24, 0x05	; 5
 132:	82 60       	ori	r24, 0x02	; 2
 134:	85 b9       	out	0x05, r24	; 5
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	91 e4       	ldi	r25, 0x41	; 65
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LCD_init>:
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	83 60       	ori	r24, 0x03	; 3
 150:	84 b9       	out	0x04, r24	; 4
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 6f       	ori	r24, 0xF0	; 240
 156:	8a b9       	out	0x0a, r24	; 10
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 ea       	ldi	r24, 0xA0	; 160
 15e:	91 e4       	ldi	r25, 0x41	; 65
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 194:	08 95       	ret

00000196 <enviaChar>:
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 19c:	08 95       	ret

0000019e <enviaCharEsq>:
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e1       	ldi	r24, 0x11	; 17
 1a6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <Keyboard_config>:
#define COLUNA3 PC3	//A3

#define INTERVALOMAX 1000 //máximo intervalo de tempo em ms entre cliques no botão pra  percorrer o alfabeto
void Keyboard_config(){
	//configura as linhas como saída
	DDRD |= (1 << DDD0); //set PD0 as OUTPUT
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1); //set PD1 as OUTPUT
 1bc:	8a b1       	in	r24, 0x0a	; 10
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD2); //set PD2 as OUTPUT
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD3); //set PD3 as OUTPUT
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	8a b9       	out	0x0a, r24	; 10
	
	//configura as colunas como entrada
	DDRC &= ~(1 << DDC1); //set PC1 as INPUT
 1ce:	87 b1       	in	r24, 0x07	; 7
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC2); //set PC2 as INPUT
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC3); //set PC3 as INPUT
 1da:	87 b1       	in	r24, 0x07	; 7
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	87 b9       	out	0x07, r24	; 7
	
	//configura as resistências de  pull_up das colunas
	PORTC |= (1 << COLUNA1); //set PC1 as INPUT_PULLUP
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA2); //set PC2 as INPUT_PULLUP
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA3); //set PC3 as INPUT_PULLUP
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	88 b9       	out	0x08, r24	; 8
 1f2:	08 95       	ret

000001f4 <TecladoMatricial>:


char teclaAnterior = '/';
int nContagens = 0;

char TecladoMatricial(){
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	e6 97       	sbiw	r28, 0x36	; 54
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
	//função para realizar a multiplexação pra identificar a tecla pressionada
	char teclasMatricial [4][3] =	{	//[linhas][colunas]
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	de 01       	movw	r26, r28
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	01 90       	ld	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	8a 95       	dec	r24
 21a:	e1 f7       	brne	.-8      	; 0x214 <TecladoMatricial+0x20>
		{'4','5', '6'},
		{'7','8', '9'},
		{'*','0', '#'},
	};
	
	char teclasTelefone_3L [8][4] = { //[linhas][colunas]
 21c:	fe 01       	movw	r30, r28
 21e:	3d 96       	adiw	r30, 0x0d	; 13
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	df 01       	movw	r26, r30
 224:	1d 92       	st	X+, r1
 226:	8a 95       	dec	r24
 228:	e9 f7       	brne	.-6      	; 0x224 <TecladoMatricial+0x30>
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	8d 87       	std	Y+13, r24	; 0x0d
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	8e 87       	std	Y+14, r24	; 0x0e
 232:	82 e4       	ldi	r24, 0x42	; 66
 234:	8f 87       	std	Y+15, r24	; 0x0f
 236:	83 e4       	ldi	r24, 0x43	; 67
 238:	88 8b       	std	Y+16, r24	; 0x10
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	89 8b       	std	Y+17, r24	; 0x11
 23e:	84 e4       	ldi	r24, 0x44	; 68
 240:	8a 8b       	std	Y+18, r24	; 0x12
 242:	85 e4       	ldi	r24, 0x45	; 69
 244:	8b 8b       	std	Y+19, r24	; 0x13
 246:	86 e4       	ldi	r24, 0x46	; 70
 248:	8c 8b       	std	Y+20, r24	; 0x14
 24a:	84 e3       	ldi	r24, 0x34	; 52
 24c:	8d 8b       	std	Y+21, r24	; 0x15
 24e:	87 e4       	ldi	r24, 0x47	; 71
 250:	8e 8b       	std	Y+22, r24	; 0x16
 252:	88 e4       	ldi	r24, 0x48	; 72
 254:	8f 8b       	std	Y+23, r24	; 0x17
 256:	89 e4       	ldi	r24, 0x49	; 73
 258:	88 8f       	std	Y+24, r24	; 0x18
 25a:	85 e3       	ldi	r24, 0x35	; 53
 25c:	89 8f       	std	Y+25, r24	; 0x19
 25e:	8a e4       	ldi	r24, 0x4A	; 74
 260:	8a 8f       	std	Y+26, r24	; 0x1a
 262:	8b e4       	ldi	r24, 0x4B	; 75
 264:	8b 8f       	std	Y+27, r24	; 0x1b
 266:	8c e4       	ldi	r24, 0x4C	; 76
 268:	8c 8f       	std	Y+28, r24	; 0x1c
 26a:	86 e3       	ldi	r24, 0x36	; 54
 26c:	8d 8f       	std	Y+29, r24	; 0x1d
 26e:	8d e4       	ldi	r24, 0x4D	; 77
 270:	8e 8f       	std	Y+30, r24	; 0x1e
 272:	8e e4       	ldi	r24, 0x4E	; 78
 274:	8f 8f       	std	Y+31, r24	; 0x1f
 276:	8f e4       	ldi	r24, 0x4F	; 79
 278:	88 a3       	std	Y+32, r24	; 0x20
 27a:	88 e3       	ldi	r24, 0x38	; 56
 27c:	89 a3       	std	Y+33, r24	; 0x21
 27e:	84 e5       	ldi	r24, 0x54	; 84
 280:	8a a3       	std	Y+34, r24	; 0x22
 282:	85 e5       	ldi	r24, 0x55	; 85
 284:	8b a3       	std	Y+35, r24	; 0x23
 286:	86 e5       	ldi	r24, 0x56	; 86
 288:	8c a3       	std	Y+36, r24	; 0x24
		{'6', 'M', 'N', 'O'},	//linha 4
		{'8', 'T', 'U', 'V'},	//linha 5
	};	//fim de teclasTelefone_3L
	
	
	char teclasTelefone_4L [2][5] = { //[linhas][colunas]
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	ed e0       	ldi	r30, 0x0D	; 13
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	de 01       	movw	r26, r28
 292:	9d 96       	adiw	r26, 0x2d	; 45
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	8a 95       	dec	r24
 29a:	e1 f7       	brne	.-8      	; 0x294 <TecladoMatricial+0xa0>
		
	char tecla_pressionada = ' ';

	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	50 e0       	ldi	r21, 0x00	; 0
	
		
	int linhaM = 0; //para percorrer as matrizes
	char caracter;
		
	char tecla_pressionada = ' ';
 2a0:	10 e2       	ldi	r17, 0x20	; 32

	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 2a2:	5d c0       	rjmp	.+186    	; 0x35e <TecladoMatricial+0x16a>
		PORTD &= ~(1 << linha);							//coloca o pino referente à linha em LOW
 2a4:	2b b1       	in	r18, 0x0b	; 11
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	04 2e       	mov	r0, r20
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <TecladoMatricial+0xbe>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <TecladoMatricial+0xba>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	8b b9       	out	0x0b, r24	; 11
		for (int outras = 0; outras < 4; outras++){		//percorre novamente todas as linhas
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	10 c0       	rjmp	.+32     	; 0x2e2 <TecladoMatricial+0xee>
			if(outras!= linha){							//verifica se outras é diferente de linha, se for
 2c2:	42 17       	cp	r20, r18
 2c4:	53 07       	cpc	r21, r19
 2c6:	59 f0       	breq	.+22     	; 0x2de <TecladoMatricial+0xea>
				PORTD |= (1 << outras);					//coloca as outras portas em HIGH
 2c8:	6b b1       	in	r22, 0x0b	; 11
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <TecladoMatricial+0xe2>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <TecladoMatricial+0xde>
 2da:	86 2b       	or	r24, r22
 2dc:	8b b9       	out	0x0b, r24	; 11

	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
		PORTD &= ~(1 << linha);							//coloca o pino referente à linha em LOW
		for (int outras = 0; outras < 4; outras++){		//percorre novamente todas as linhas
 2de:	2f 5f       	subi	r18, 0xFF	; 255
 2e0:	3f 4f       	sbci	r19, 0xFF	; 255
 2e2:	24 30       	cpi	r18, 0x04	; 4
 2e4:	31 05       	cpc	r19, r1
 2e6:	6c f3       	brlt	.-38     	; 0x2c2 <TecladoMatricial+0xce>
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	33 c0       	rjmp	.+102    	; 0x354 <TecladoMatricial+0x160>
				PORTD |= (1 << outras);					//coloca as outras portas em HIGH
			}
		}
		//delay_ms(10);
		for (int colunas = 1; colunas <=3; colunas++){			//percorre todas as colunas
			if(!((PINC & (1 << colunas)) >> colunas)){			//se a coluna em questão for LOW, então significa que foi pressionada
 2ee:	86 b1       	in	r24, 0x06	; 6
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	02 2e       	mov	r0, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <TecladoMatricial+0x108>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <TecladoMatricial+0x104>
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	86 23       	and	r24, r22
 304:	97 23       	and	r25, r23
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <TecladoMatricial+0x11a>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <TecladoMatricial+0x116>
 312:	89 2b       	or	r24, r25
 314:	e9 f4       	brne	.+58     	; 0x350 <TecladoMatricial+0x15c>
				tecla_pressionada =  (teclasMatricial[linha][colunas-1]); //armazena a tecla pressionada
 316:	fa 01       	movw	r30, r20
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	e4 0f       	add	r30, r20
 31e:	f5 1f       	adc	r31, r21
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	8c 0f       	add	r24, r28
 326:	9d 1f       	adc	r25, r29
 328:	e8 0f       	add	r30, r24
 32a:	f9 1f       	adc	r31, r25
 32c:	c9 01       	movw	r24, r18
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	e8 0f       	add	r30, r24
 332:	f9 1f       	adc	r31, r25
 334:	10 81       	ld	r17, Z
				while(!((PINC & (1 << colunas)) >> colunas));	//debounce simples
 336:	86 b1       	in	r24, 0x06	; 6
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	86 23       	and	r24, r22
 33c:	97 23       	and	r25, r23
 33e:	02 2e       	mov	r0, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <TecladoMatricial+0x152>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <TecladoMatricial+0x14e>
 34a:	89 2b       	or	r24, r25
 34c:	a1 f3       	breq	.-24     	; 0x336 <TecladoMatricial+0x142>
 34e:	05 c0       	rjmp	.+10     	; 0x35a <TecladoMatricial+0x166>
			if(outras!= linha){							//verifica se outras é diferente de linha, se for
				PORTD |= (1 << outras);					//coloca as outras portas em HIGH
			}
		}
		//delay_ms(10);
		for (int colunas = 1; colunas <=3; colunas++){			//percorre todas as colunas
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	24 30       	cpi	r18, 0x04	; 4
 356:	31 05       	cpc	r19, r1
 358:	54 f2       	brlt	.-108    	; 0x2ee <TecladoMatricial+0xfa>
		
	char tecla_pressionada = ' ';

	
	//início do algoritmo para varrer o teclado
	for (int linha = 0; linha<4; linha++){				//percorre todas as linhas
 35a:	4f 5f       	subi	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	44 30       	cpi	r20, 0x04	; 4
 360:	51 05       	cpc	r21, r1
 362:	0c f4       	brge	.+2      	; 0x366 <TecladoMatricial+0x172>
 364:	9f cf       	rjmp	.-194    	; 0x2a4 <TecladoMatricial+0xb0>
				break;
			}
		}
	}
	
	delay_ms(10);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	91 e4       	ldi	r25, 0x41	; 65
 36e:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	
	char teclaAtual = tecla_pressionada;
	
	if(teclaAtual != ' '){
 372:	10 32       	cpi	r17, 0x20	; 32
 374:	09 f4       	brne	.+2      	; 0x378 <TecladoMatricial+0x184>
 376:	80 c0       	rjmp	.+256    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		//enviaChar('d');
		if (teclaAtual == '1' || teclaAtual == '0' || teclaAtual == '*' || teclaAtual == '#')
 378:	80 ed       	ldi	r24, 0xD0	; 208
 37a:	81 0f       	add	r24, r17
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	20 f0       	brcs	.+8      	; 0x388 <TecladoMatricial+0x194>
 380:	1a 32       	cpi	r17, 0x2A	; 42
 382:	11 f0       	breq	.+4      	; 0x388 <TecladoMatricial+0x194>
 384:	13 32       	cpi	r17, 0x23	; 35
 386:	21 f4       	brne	.+8      	; 0x390 <TecladoMatricial+0x19c>
		{
			caracter = teclaAtual;
			enviaChar(caracter);
 388:	81 2f       	mov	r24, r17
 38a:	0e 94 cb 00 	call	0x196	; 0x196 <enviaChar>
 38e:	74 c0       	rjmp	.+232    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		}//fecha o if tecla atual é 1, 0, #, *
		
		else{ //se não for 1, 0, # ou *
			
			if(teclaAtual == teclaAnterior){ //se a tecla pressionada for igual à pressionada anteriormente
 390:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 394:	18 13       	cpse	r17, r24
 396:	67 c0       	rjmp	.+206    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
				nContagens ++;	//incrementa o número de contagens
 398:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 39c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
 3a4:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0x1>
 3a8:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
				switch (teclaAtual){	//altera a linha da matriz conforme o número
 3ac:	15 33       	cpi	r17, 0x35	; 53
 3ae:	91 f0       	breq	.+36     	; 0x3d4 <TecladoMatricial+0x1e0>
 3b0:	28 f4       	brcc	.+10     	; 0x3bc <TecladoMatricial+0x1c8>
 3b2:	13 33       	cpi	r17, 0x33	; 51
 3b4:	c1 f0       	breq	.+48     	; 0x3e6 <TecladoMatricial+0x1f2>
 3b6:	14 33       	cpi	r17, 0x34	; 52
 3b8:	51 f0       	breq	.+20     	; 0x3ce <TecladoMatricial+0x1da>
 3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <TecladoMatricial+0x1d4>
 3bc:	18 33       	cpi	r17, 0x38	; 56
 3be:	81 f0       	breq	.+32     	; 0x3e0 <TecladoMatricial+0x1ec>
 3c0:	19 33       	cpi	r17, 0x39	; 57
 3c2:	89 f0       	breq	.+34     	; 0x3e6 <TecladoMatricial+0x1f2>
 3c4:	16 33       	cpi	r17, 0x36	; 54
 3c6:	49 f0       	breq	.+18     	; 0x3da <TecladoMatricial+0x1e6>
	}; //fim de teclasTelefone_4L
	
	
	
		
	int linhaM = 0; //para percorrer as matrizes
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <TecladoMatricial+0x1f6>
					break;
					case '3':
					linhaM = 1;
					break;
					case '4':
					linhaM = 2;
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3d2:	0b c0       	rjmp	.+22     	; 0x3ea <TecladoMatricial+0x1f6>
					case '5':
					linhaM = 3;
 3d4:	83 e0       	ldi	r24, 0x03	; 3
 3d6:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3d8:	08 c0       	rjmp	.+16     	; 0x3ea <TecladoMatricial+0x1f6>
					case '6':
					linhaM = 4;
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <TecladoMatricial+0x1f6>
					case '7':
					linhaM = 0;
					break;
					case '8':
					linhaM = 5;
 3e0:	85 e0       	ldi	r24, 0x05	; 5
 3e2:	90 e0       	ldi	r25, 0x00	; 0
					break;
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <TecladoMatricial+0x1f6>
				switch (teclaAtual){	//altera a linha da matriz conforme o número
					case '2':
					linhaM = 0;
					break;
					case '3':
					linhaM = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
					case '9':			//se a tecla pressionada for 9, vai pra segunda linha da matriz
					linhaM = 1;
					break;
				}
				
				if (teclaAtual == '7' || teclaAtual == '9')	//se a tecla for 7 ou 9, percorre a matriz de 4 letras
 3ea:	17 33       	cpi	r17, 0x37	; 55
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <TecladoMatricial+0x1fe>
 3ee:	19 33       	cpi	r17, 0x39	; 57
 3f0:	e9 f4       	brne	.+58     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				{
					if (nContagens == 5){	//se atingir o limite do tamanho da matriz zera o contador
 3f2:	25 30       	cpi	r18, 0x05	; 5
 3f4:	31 05       	cpc	r19, r1
 3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
						nContagens = 0;
 3f8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 3fc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
					}
					caracter = teclasTelefone_4L[linhaM][nContagens];
 400:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 404:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 408:	ac 01       	movw	r20, r24
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	84 0f       	add	r24, r20
 414:	95 1f       	adc	r25, r21
 416:	a1 e0       	ldi	r26, 0x01	; 1
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	ac 0f       	add	r26, r28
 41c:	bd 1f       	adc	r27, r29
 41e:	8a 0f       	add	r24, r26
 420:	9b 1f       	adc	r25, r27
 422:	fc 01       	movw	r30, r24
 424:	e2 0f       	add	r30, r18
 426:	f3 1f       	adc	r31, r19
 428:	14 a5       	ldd	r17, Z+44	; 0x2c
 42a:	19 c0       	rjmp	.+50     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
				}	//fecha o if que verifica se a tecla é 7 ou 9
				
				else{ //se a tecla for 2,3,4,5,6, ou 8 percorre a matriz de 3 letras
					if (nContagens == 4){	//se atingir o limite do tamanho da matriz zera o contador
 42c:	24 30       	cpi	r18, 0x04	; 4
 42e:	31 05       	cpc	r19, r1
 430:	21 f4       	brne	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
						nContagens = 0;
 432:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 436:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
					}
					caracter = teclasTelefone_3L[linhaM][nContagens];
 43a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 43e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	4c 0f       	add	r20, r28
 450:	5d 1f       	adc	r21, r29
 452:	84 0f       	add	r24, r20
 454:	95 1f       	adc	r25, r21
 456:	fc 01       	movw	r30, r24
 458:	e2 0f       	add	r30, r18
 45a:	f3 1f       	adc	r31, r19
 45c:	14 85       	ldd	r17, Z+12	; 0x0c
				}
				enviaCharEsq(caracter);
 45e:	81 2f       	mov	r24, r17
 460:	0e 94 cf 00 	call	0x19e	; 0x19e <enviaCharEsq>
 464:	09 c0       	rjmp	.+18     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				
			} //fecha o if teclaAtual == teclaAnterior
			else{
				nContagens = 0;
 466:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 46a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
				teclaAnterior = teclaAtual;
 46e:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__DATA_REGION_ORIGIN__>
				enviaChar(caracter);
 472:	81 2f       	mov	r24, r17
 474:	0e 94 cb 00 	call	0x196	; 0x196 <enviaChar>
	} //teclaAtual != ' '
		
	//teclaAnterior = caracter;
		
	return caracter;
}
 478:	81 2f       	mov	r24, r17
 47a:	e6 96       	adiw	r28, 0x36	; 54
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	08 95       	ret

0000048e <main>:


int main(void)
{
	//LCD
	DDRB = 0x03;
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 492:	80 ef       	ldi	r24, 0xF0	; 240
 494:	8a b9       	out	0x0a, r24	; 10
	delay_ms(10);
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	91 e4       	ldi	r25, 0x41	; 65
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	
	LCD_init();
 4a2:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_init>
	delay_ms(10);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	91 e4       	ldi	r25, 0x41	; 65
 4ae:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
	
	
	
	Keyboard_config();
 4b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Keyboard_config>
	
	LCD_control(LCD_SEG_LINHA, 0); //NECESSÁRIO CHAMAR ESSA FUNÇÃO ANTES DE PEGAR ALGO DO TECLADO
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	80 ec       	ldi	r24, 0xC0	; 192
 4ba:	0e 94 6f 00 	call	0xde	; 0xde <LCD_control>
	while(1){
		TecladoMatricial();
 4be:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <TecladoMatricial>
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <main+0x30>

000004c4 <__fixunssfsi>:
 4c4:	0e 94 99 02 	call	0x532	; 0x532 <__fp_splitA>
 4c8:	88 f0       	brcs	.+34     	; 0x4ec <__fixunssfsi+0x28>
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	98 f0       	brcs	.+38     	; 0x4f4 <__fixunssfsi+0x30>
 4ce:	b9 2f       	mov	r27, r25
 4d0:	99 27       	eor	r25, r25
 4d2:	b7 51       	subi	r27, 0x17	; 23
 4d4:	b0 f0       	brcs	.+44     	; 0x502 <__fixunssfsi+0x3e>
 4d6:	e1 f0       	breq	.+56     	; 0x510 <__fixunssfsi+0x4c>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	1a f0       	brmi	.+6      	; 0x4e8 <__fixunssfsi+0x24>
 4e2:	ba 95       	dec	r27
 4e4:	c9 f7       	brne	.-14     	; 0x4d8 <__fixunssfsi+0x14>
 4e6:	14 c0       	rjmp	.+40     	; 0x510 <__fixunssfsi+0x4c>
 4e8:	b1 30       	cpi	r27, 0x01	; 1
 4ea:	91 f0       	breq	.+36     	; 0x510 <__fixunssfsi+0x4c>
 4ec:	0e 94 b3 02 	call	0x566	; 0x566 <__fp_zero>
 4f0:	b1 e0       	ldi	r27, 0x01	; 1
 4f2:	08 95       	ret
 4f4:	0c 94 b3 02 	jmp	0x566	; 0x566 <__fp_zero>
 4f8:	67 2f       	mov	r22, r23
 4fa:	78 2f       	mov	r23, r24
 4fc:	88 27       	eor	r24, r24
 4fe:	b8 5f       	subi	r27, 0xF8	; 248
 500:	39 f0       	breq	.+14     	; 0x510 <__fixunssfsi+0x4c>
 502:	b9 3f       	cpi	r27, 0xF9	; 249
 504:	cc f3       	brlt	.-14     	; 0x4f8 <__fixunssfsi+0x34>
 506:	86 95       	lsr	r24
 508:	77 95       	ror	r23
 50a:	67 95       	ror	r22
 50c:	b3 95       	inc	r27
 50e:	d9 f7       	brne	.-10     	; 0x506 <__fixunssfsi+0x42>
 510:	3e f4       	brtc	.+14     	; 0x520 <__fixunssfsi+0x5c>
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__fp_split3>:
 522:	57 fd       	sbrc	r21, 7
 524:	90 58       	subi	r25, 0x80	; 128
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	59 f0       	breq	.+22     	; 0x542 <__fp_splitA+0x10>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	71 f0       	breq	.+28     	; 0x54c <__fp_splitA+0x1a>
 530:	47 95       	ror	r20

00000532 <__fp_splitA>:
 532:	88 0f       	add	r24, r24
 534:	97 fb       	bst	r25, 7
 536:	99 1f       	adc	r25, r25
 538:	61 f0       	breq	.+24     	; 0x552 <__fp_splitA+0x20>
 53a:	9f 3f       	cpi	r25, 0xFF	; 255
 53c:	79 f0       	breq	.+30     	; 0x55c <__fp_splitA+0x2a>
 53e:	87 95       	ror	r24
 540:	08 95       	ret
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	55 1f       	adc	r21, r21
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <__fp_split3+0xe>
 54c:	46 95       	lsr	r20
 54e:	f1 df       	rcall	.-30     	; 0x532 <__fp_splitA>
 550:	08 c0       	rjmp	.+16     	; 0x562 <__fp_splitA+0x30>
 552:	16 16       	cp	r1, r22
 554:	17 06       	cpc	r1, r23
 556:	18 06       	cpc	r1, r24
 558:	99 1f       	adc	r25, r25
 55a:	f1 cf       	rjmp	.-30     	; 0x53e <__fp_splitA+0xc>
 55c:	86 95       	lsr	r24
 55e:	71 05       	cpc	r23, r1
 560:	61 05       	cpc	r22, r1
 562:	08 94       	sec
 564:	08 95       	ret

00000566 <__fp_zero>:
 566:	e8 94       	clt

00000568 <__fp_szero>:
 568:	bb 27       	eor	r27, r27
 56a:	66 27       	eor	r22, r22
 56c:	77 27       	eor	r23, r23
 56e:	cb 01       	movw	r24, r22
 570:	97 f9       	bld	r25, 7
 572:	08 95       	ret

00000574 <__mulsf3>:
 574:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3x>
 578:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_round>
 57c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_pscA>
 580:	38 f0       	brcs	.+14     	; 0x590 <__mulsf3+0x1c>
 582:	0e 94 84 03 	call	0x708	; 0x708 <__fp_pscB>
 586:	20 f0       	brcs	.+8      	; 0x590 <__mulsf3+0x1c>
 588:	95 23       	and	r25, r21
 58a:	11 f0       	breq	.+4      	; 0x590 <__mulsf3+0x1c>
 58c:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>
 590:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__fp_nan>
 594:	11 24       	eor	r1, r1
 596:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_szero>

0000059a <__mulsf3x>:
 59a:	0e 94 91 02 	call	0x522	; 0x522 <__fp_split3>
 59e:	70 f3       	brcs	.-36     	; 0x57c <__mulsf3+0x8>

000005a0 <__mulsf3_pse>:
 5a0:	95 9f       	mul	r25, r21
 5a2:	c1 f3       	breq	.-16     	; 0x594 <__mulsf3+0x20>
 5a4:	95 0f       	add	r25, r21
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	55 1f       	adc	r21, r21
 5aa:	62 9f       	mul	r22, r18
 5ac:	f0 01       	movw	r30, r0
 5ae:	72 9f       	mul	r23, r18
 5b0:	bb 27       	eor	r27, r27
 5b2:	f0 0d       	add	r31, r0
 5b4:	b1 1d       	adc	r27, r1
 5b6:	63 9f       	mul	r22, r19
 5b8:	aa 27       	eor	r26, r26
 5ba:	f0 0d       	add	r31, r0
 5bc:	b1 1d       	adc	r27, r1
 5be:	aa 1f       	adc	r26, r26
 5c0:	64 9f       	mul	r22, r20
 5c2:	66 27       	eor	r22, r22
 5c4:	b0 0d       	add	r27, r0
 5c6:	a1 1d       	adc	r26, r1
 5c8:	66 1f       	adc	r22, r22
 5ca:	82 9f       	mul	r24, r18
 5cc:	22 27       	eor	r18, r18
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	62 1f       	adc	r22, r18
 5d4:	73 9f       	mul	r23, r19
 5d6:	b0 0d       	add	r27, r0
 5d8:	a1 1d       	adc	r26, r1
 5da:	62 1f       	adc	r22, r18
 5dc:	83 9f       	mul	r24, r19
 5de:	a0 0d       	add	r26, r0
 5e0:	61 1d       	adc	r22, r1
 5e2:	22 1f       	adc	r18, r18
 5e4:	74 9f       	mul	r23, r20
 5e6:	33 27       	eor	r19, r19
 5e8:	a0 0d       	add	r26, r0
 5ea:	61 1d       	adc	r22, r1
 5ec:	23 1f       	adc	r18, r19
 5ee:	84 9f       	mul	r24, r20
 5f0:	60 0d       	add	r22, r0
 5f2:	21 1d       	adc	r18, r1
 5f4:	82 2f       	mov	r24, r18
 5f6:	76 2f       	mov	r23, r22
 5f8:	6a 2f       	mov	r22, r26
 5fa:	11 24       	eor	r1, r1
 5fc:	9f 57       	subi	r25, 0x7F	; 127
 5fe:	50 40       	sbci	r21, 0x00	; 0
 600:	9a f0       	brmi	.+38     	; 0x628 <__mulsf3_pse+0x88>
 602:	f1 f0       	breq	.+60     	; 0x640 <__mulsf3_pse+0xa0>
 604:	88 23       	and	r24, r24
 606:	4a f0       	brmi	.+18     	; 0x61a <__mulsf3_pse+0x7a>
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	bb 1f       	adc	r27, r27
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	91 50       	subi	r25, 0x01	; 1
 616:	50 40       	sbci	r21, 0x00	; 0
 618:	a9 f7       	brne	.-22     	; 0x604 <__mulsf3_pse+0x64>
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	51 05       	cpc	r21, r1
 61e:	80 f0       	brcs	.+32     	; 0x640 <__mulsf3_pse+0xa0>
 620:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>
 624:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_szero>
 628:	5f 3f       	cpi	r21, 0xFF	; 255
 62a:	e4 f3       	brlt	.-8      	; 0x624 <__mulsf3_pse+0x84>
 62c:	98 3e       	cpi	r25, 0xE8	; 232
 62e:	d4 f3       	brlt	.-12     	; 0x624 <__mulsf3_pse+0x84>
 630:	86 95       	lsr	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b7 95       	ror	r27
 638:	f7 95       	ror	r31
 63a:	e7 95       	ror	r30
 63c:	9f 5f       	subi	r25, 0xFF	; 255
 63e:	c1 f7       	brne	.-16     	; 0x630 <__mulsf3_pse+0x90>
 640:	fe 2b       	or	r31, r30
 642:	88 0f       	add	r24, r24
 644:	91 1d       	adc	r25, r1
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <round>:
 64e:	0e 94 99 02 	call	0x532	; 0x532 <__fp_splitA>
 652:	e8 f0       	brcs	.+58     	; 0x68e <round+0x40>
 654:	9e 37       	cpi	r25, 0x7E	; 126
 656:	e8 f0       	brcs	.+58     	; 0x692 <round+0x44>
 658:	96 39       	cpi	r25, 0x96	; 150
 65a:	b8 f4       	brcc	.+46     	; 0x68a <round+0x3c>
 65c:	9e 38       	cpi	r25, 0x8E	; 142
 65e:	48 f4       	brcc	.+18     	; 0x672 <round+0x24>
 660:	67 2f       	mov	r22, r23
 662:	78 2f       	mov	r23, r24
 664:	88 27       	eor	r24, r24
 666:	98 5f       	subi	r25, 0xF8	; 248
 668:	f9 cf       	rjmp	.-14     	; 0x65c <round+0xe>
 66a:	86 95       	lsr	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	93 95       	inc	r25
 672:	95 39       	cpi	r25, 0x95	; 149
 674:	d0 f3       	brcs	.-12     	; 0x66a <round+0x1c>
 676:	b6 2f       	mov	r27, r22
 678:	b1 70       	andi	r27, 0x01	; 1
 67a:	6b 0f       	add	r22, r27
 67c:	71 1d       	adc	r23, r1
 67e:	81 1d       	adc	r24, r1
 680:	20 f4       	brcc	.+8      	; 0x68a <round+0x3c>
 682:	87 95       	ror	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	93 95       	inc	r25
 68a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_mintl>
 68e:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_mpack>
 692:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_szero>

00000696 <__fp_inf>:
 696:	97 f9       	bld	r25, 7
 698:	9f 67       	ori	r25, 0x7F	; 127
 69a:	80 e8       	ldi	r24, 0x80	; 128
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <__fp_mintl>:
 6a2:	88 23       	and	r24, r24
 6a4:	71 f4       	brne	.+28     	; 0x6c2 <__fp_mintl+0x20>
 6a6:	77 23       	and	r23, r23
 6a8:	21 f0       	breq	.+8      	; 0x6b2 <__fp_mintl+0x10>
 6aa:	98 50       	subi	r25, 0x08	; 8
 6ac:	87 2b       	or	r24, r23
 6ae:	76 2f       	mov	r23, r22
 6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <__fp_mintl+0x1e>
 6b2:	66 23       	and	r22, r22
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__fp_mintl+0x18>
 6b6:	99 27       	eor	r25, r25
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <__fp_mintl+0x32>
 6ba:	90 51       	subi	r25, 0x10	; 16
 6bc:	86 2b       	or	r24, r22
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	2a f0       	brmi	.+10     	; 0x6ce <__fp_mintl+0x2c>
 6c4:	9a 95       	dec	r25
 6c6:	66 0f       	add	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	da f7       	brpl	.-10     	; 0x6c4 <__fp_mintl+0x22>
 6ce:	88 0f       	add	r24, r24
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	97 f9       	bld	r25, 7
 6d6:	08 95       	ret

000006d8 <__fp_mpack>:
 6d8:	9f 3f       	cpi	r25, 0xFF	; 255
 6da:	31 f0       	breq	.+12     	; 0x6e8 <__fp_mpack_finite+0xc>

000006dc <__fp_mpack_finite>:
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	20 f4       	brcc	.+8      	; 0x6e8 <__fp_mpack_finite+0xc>
 6e0:	87 95       	ror	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b7 95       	ror	r27
 6e8:	88 0f       	add	r24, r24
 6ea:	91 1d       	adc	r25, r1
 6ec:	96 95       	lsr	r25
 6ee:	87 95       	ror	r24
 6f0:	97 f9       	bld	r25, 7
 6f2:	08 95       	ret

000006f4 <__fp_nan>:
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	80 ec       	ldi	r24, 0xC0	; 192
 6f8:	08 95       	ret

000006fa <__fp_pscA>:
 6fa:	00 24       	eor	r0, r0
 6fc:	0a 94       	dec	r0
 6fe:	16 16       	cp	r1, r22
 700:	17 06       	cpc	r1, r23
 702:	18 06       	cpc	r1, r24
 704:	09 06       	cpc	r0, r25
 706:	08 95       	ret

00000708 <__fp_pscB>:
 708:	00 24       	eor	r0, r0
 70a:	0a 94       	dec	r0
 70c:	12 16       	cp	r1, r18
 70e:	13 06       	cpc	r1, r19
 710:	14 06       	cpc	r1, r20
 712:	05 06       	cpc	r0, r21
 714:	08 95       	ret

00000716 <__fp_round>:
 716:	09 2e       	mov	r0, r25
 718:	03 94       	inc	r0
 71a:	00 0c       	add	r0, r0
 71c:	11 f4       	brne	.+4      	; 0x722 <__fp_round+0xc>
 71e:	88 23       	and	r24, r24
 720:	52 f0       	brmi	.+20     	; 0x736 <__fp_round+0x20>
 722:	bb 0f       	add	r27, r27
 724:	40 f4       	brcc	.+16     	; 0x736 <__fp_round+0x20>
 726:	bf 2b       	or	r27, r31
 728:	11 f4       	brne	.+4      	; 0x72e <__fp_round+0x18>
 72a:	60 ff       	sbrs	r22, 0
 72c:	04 c0       	rjmp	.+8      	; 0x736 <__fp_round+0x20>
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
