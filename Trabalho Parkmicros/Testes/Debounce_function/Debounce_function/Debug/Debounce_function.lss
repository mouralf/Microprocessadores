
Debounce_function.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000777  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a5  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  78:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_ms>:
#define BOTAO1 PB3 //D11 -> referente a R$ 0,50
#define BOTAO2 PB4 //D12 -> referente a R$ 1,00

#define BOUNCE 7

void delay_ms(float tempo_ms){
  80:	cf 93       	push	r28
	/*Função que recebe o tempo em ms como parâmetro e proporciona um delay correspondente ao tempo solicitado*/
	TCCR0A = 0x2;		//modo CTC para o timer 0
  82:	c2 e0       	ldi	r28, 0x02	; 2
  84:	c4 bd       	out	0x24, r28	; 36
	TCCR0B = 0x5;		//PRESCALER de 1024
  86:	25 e0       	ldi	r18, 0x05	; 5
  88:	25 bd       	out	0x25, r18	; 37
	TCNT0 = 0;			//Zera timer
  8a:	16 bc       	out	0x26, r1	; 38
	
	//Sendo a frequência do timer de 16 MHz e um prescaler de 1024 temos: 16 MHz/1024 = 15625
	//Desse modo, o tempo do timer é dado por 1/15625 = 64 us
	//Assim, o número de contagens é dado por tempo_ms/64 * 1000
	unsigned char n_contagem = round(tempo_ms/64*1000);		//número de contagens arredondado
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	40 e8       	ldi	r20, 0x80	; 128
  92:	5c e3       	ldi	r21, 0x3C	; 60
  94:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__mulsf3>
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	4a e7       	ldi	r20, 0x7A	; 122
  9e:	54 e4       	ldi	r21, 0x44	; 68
  a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__mulsf3>
  a4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <round>
  a8:	0e 94 a7 00 	call	0x14e	; 0x14e <__fixunssfsi>
	OCR0A = n_contagem;										//Valor de comparação 3 contagens (1,66 ms)
  ac:	67 bd       	out	0x27, r22	; 39
	
	TIFR0 = (1 << 1);										//limpa flag de comparacao A
  ae:	c5 bb       	out	0x15, r28	; 21
	while((TIFR0 & (1 << 1)) == 0);
  b0:	a9 9b       	sbis	0x15, 1	; 21
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <delay_ms+0x30>
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <Buttons_config>:

void Buttons_config(){
	/*configura as portas referentes aos botões como INPUT*/
	DDRB &= ~(1 << DDB3);	//set D11 as INPUT
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	87 7f       	andi	r24, 0xF7	; 247
  bc:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB4);	//set D12 as INPUT
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	84 b9       	out	0x04, r24	; 4
  c4:	08 95       	ret

000000c6 <Buttons_validation>:



//void Debounce_validation()

float Buttons_validation(){
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
	unsigned char count = 0;					//utilizados para controle do debounce
  ca:	c0 e0       	ldi	r28, 0x00	; 0

//void Debounce_validation()

float Buttons_validation(){
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char count = 0;					//utilizados para controle do debounce
	float valor = 0;
	
	while(count != BOUNCE){						//enquanto count não atingir 7
  ce:	28 c0       	rjmp	.+80     	; 0x120 <Buttons_validation+0x5a>
		delay_ms(1);							//delay para corrigir o debounce
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	9f e3       	ldi	r25, 0x3F	; 63
  d8:	0e 94 40 00 	call	0x80	; 0x80 <delay_ms>
		if(PINB >> BOTAO1 == 1){				//se a leitura do registrador B deslocada em 3 bits for 1 foi pressionado o botão D11/PB3
  dc:	83 b1       	in	r24, 0x03	; 3
  de:	86 95       	lsr	r24
  e0:	86 95       	lsr	r24
  e2:	86 95       	lsr	r24
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	61 f4       	brne	.+24     	; 0x100 <Buttons_validation+0x3a>
			botaoAtual = (PINB >> BOTAO1);		//le o estado atual do botão D11
  e8:	83 b1       	in	r24, 0x03	; 3
  ea:	86 95       	lsr	r24
  ec:	86 95       	lsr	r24
  ee:	86 95       	lsr	r24
			if (botaoAtual == botaoAntes)		//se for igual ao estado anterior
  f0:	d8 13       	cpse	r29, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Buttons_validation+0x32>
			count++;							//incrementa o contador
  f4:	cf 5f       	subi	r28, 0xFF	; 255
  f6:	01 c0       	rjmp	.+2      	; 0xfa <Buttons_validation+0x34>
			else
			count = 0;							//senão, zera o contador
  f8:	c0 e0       	ldi	r28, 0x00	; 0
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
  fa:	c7 30       	cpi	r28, 0x07	; 7
  fc:	b9 f0       	breq	.+46     	; 0x12c <Buttons_validation+0x66>
				valor = 0.50;					//seta o valor a ser retornado para 0.50
				break;
			}
			else
			botaoAntes = botaoAtual;			//se nao tiver atingido 7, volta a contar
  fe:	d8 2f       	mov	r29, r24
		}
		if(PINB >> BOTAO2 == 1){				//se a leitura do registrador B deslocada em 4 bits for 1 foi pressionado o botão D12/PB4
 100:	83 b1       	in	r24, 0x03	; 3
 102:	82 95       	swap	r24
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	59 f4       	brne	.+22     	; 0x120 <Buttons_validation+0x5a>
			botaoAtual = (PINB >> BOTAO2);		//le o estado atual do botão D12
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	82 95       	swap	r24
 10e:	8f 70       	andi	r24, 0x0F	; 15
			if (botaoAtual == botaoAntes)		//se for igual ao estado anterior
 110:	d8 13       	cpse	r29, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <Buttons_validation+0x52>
			count++;							//incrementa o contador
 114:	cf 5f       	subi	r28, 0xFF	; 255
 116:	01 c0       	rjmp	.+2      	; 0x11a <Buttons_validation+0x54>
			else
			count = 0;							//senão, zera o contador
 118:	c0 e0       	ldi	r28, 0x00	; 0
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
 11a:	c7 30       	cpi	r28, 0x07	; 7
 11c:	61 f0       	breq	.+24     	; 0x136 <Buttons_validation+0x70>
				valor = 1;						//seta o valor a ser retornado para 1
				break;
			}
			else
			botaoAntes = botaoAtual;			//se nao tiver atingido 7, volta a contar
 11e:	d8 2f       	mov	r29, r24
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
	unsigned char count = 0;					//utilizados para controle do debounce
	float valor = 0;
	
	while(count != BOUNCE){						//enquanto count não atingir 7
 120:	c7 30       	cpi	r28, 0x07	; 7
 122:	b1 f6       	brne	.-84     	; 0xd0 <Buttons_validation+0xa>

float Buttons_validation(){
	/*Valida se algum botão foi pressionado e, se sim, faz o debounce e retorna o valor correspondnete (0,50 ou 1,00 real)*/
	unsigned char botaoAntes = 0, botaoAtual;	//utilizados para controle do debounce
	unsigned char count = 0;					//utilizados para controle do debounce
	float valor = 0;
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	cb 01       	movw	r24, r22
 12a:	09 c0       	rjmp	.+18     	; 0x13e <Buttons_validation+0x78>
			count++;							//incrementa o contador
			else
			count = 0;							//senão, zera o contador
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
				valor = 0.50;					//seta o valor a ser retornado para 0.50
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	9f e3       	ldi	r25, 0x3F	; 63
 134:	04 c0       	rjmp	.+8      	; 0x13e <Buttons_validation+0x78>
			count++;							//incrementa o contador
			else
			count = 0;							//senão, zera o contador
			
			if (count == BOUNCE){				//se o contador atingir o valor de 7
				valor = 1;						//seta o valor a ser retornado para 1
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	9f e3       	ldi	r25, 0x3F	; 63
			else
			botaoAntes = botaoAtual;			//se nao tiver atingido 7, volta a contar
		}
	}
	return valor;
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <main>:

int main(void)
{
	Buttons_config(); //chama a função que configura as portas dos botões como INPUT
 144:	0e 94 5c 00 	call	0xb8	; 0xb8 <Buttons_config>
	/* Replace with your application code */
	while (1)
	{
		Buttons_validation(); //chama a função que verifica se um botão foi pressionado
 148:	0e 94 63 00 	call	0xc6	; 0xc6 <Buttons_validation>
 14c:	fd cf       	rjmp	.-6      	; 0x148 <main+0x4>

0000014e <__fixunssfsi>:
 14e:	0e 94 de 00 	call	0x1bc	; 0x1bc <__fp_splitA>
 152:	88 f0       	brcs	.+34     	; 0x176 <__fixunssfsi+0x28>
 154:	9f 57       	subi	r25, 0x7F	; 127
 156:	98 f0       	brcs	.+38     	; 0x17e <__fixunssfsi+0x30>
 158:	b9 2f       	mov	r27, r25
 15a:	99 27       	eor	r25, r25
 15c:	b7 51       	subi	r27, 0x17	; 23
 15e:	b0 f0       	brcs	.+44     	; 0x18c <__fixunssfsi+0x3e>
 160:	e1 f0       	breq	.+56     	; 0x19a <__fixunssfsi+0x4c>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	88 1f       	adc	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	1a f0       	brmi	.+6      	; 0x172 <__fixunssfsi+0x24>
 16c:	ba 95       	dec	r27
 16e:	c9 f7       	brne	.-14     	; 0x162 <__fixunssfsi+0x14>
 170:	14 c0       	rjmp	.+40     	; 0x19a <__fixunssfsi+0x4c>
 172:	b1 30       	cpi	r27, 0x01	; 1
 174:	91 f0       	breq	.+36     	; 0x19a <__fixunssfsi+0x4c>
 176:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <__fp_zero>
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	08 95       	ret
 17e:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__fp_zero>
 182:	67 2f       	mov	r22, r23
 184:	78 2f       	mov	r23, r24
 186:	88 27       	eor	r24, r24
 188:	b8 5f       	subi	r27, 0xF8	; 248
 18a:	39 f0       	breq	.+14     	; 0x19a <__fixunssfsi+0x4c>
 18c:	b9 3f       	cpi	r27, 0xF9	; 249
 18e:	cc f3       	brlt	.-14     	; 0x182 <__fixunssfsi+0x34>
 190:	86 95       	lsr	r24
 192:	77 95       	ror	r23
 194:	67 95       	ror	r22
 196:	b3 95       	inc	r27
 198:	d9 f7       	brne	.-10     	; 0x190 <__fixunssfsi+0x42>
 19a:	3e f4       	brtc	.+14     	; 0x1aa <__fixunssfsi+0x5c>
 19c:	90 95       	com	r25
 19e:	80 95       	com	r24
 1a0:	70 95       	com	r23
 1a2:	61 95       	neg	r22
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	8f 4f       	sbci	r24, 0xFF	; 255
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__fp_split3>:
 1ac:	57 fd       	sbrc	r21, 7
 1ae:	90 58       	subi	r25, 0x80	; 128
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	59 f0       	breq	.+22     	; 0x1cc <__fp_splitA+0x10>
 1b6:	5f 3f       	cpi	r21, 0xFF	; 255
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <__fp_splitA+0x1a>
 1ba:	47 95       	ror	r20

000001bc <__fp_splitA>:
 1bc:	88 0f       	add	r24, r24
 1be:	97 fb       	bst	r25, 7
 1c0:	99 1f       	adc	r25, r25
 1c2:	61 f0       	breq	.+24     	; 0x1dc <__fp_splitA+0x20>
 1c4:	9f 3f       	cpi	r25, 0xFF	; 255
 1c6:	79 f0       	breq	.+30     	; 0x1e6 <__fp_splitA+0x2a>
 1c8:	87 95       	ror	r24
 1ca:	08 95       	ret
 1cc:	12 16       	cp	r1, r18
 1ce:	13 06       	cpc	r1, r19
 1d0:	14 06       	cpc	r1, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	f2 cf       	rjmp	.-28     	; 0x1ba <__fp_split3+0xe>
 1d6:	46 95       	lsr	r20
 1d8:	f1 df       	rcall	.-30     	; 0x1bc <__fp_splitA>
 1da:	08 c0       	rjmp	.+16     	; 0x1ec <__fp_splitA+0x30>
 1dc:	16 16       	cp	r1, r22
 1de:	17 06       	cpc	r1, r23
 1e0:	18 06       	cpc	r1, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	f1 cf       	rjmp	.-30     	; 0x1c8 <__fp_splitA+0xc>
 1e6:	86 95       	lsr	r24
 1e8:	71 05       	cpc	r23, r1
 1ea:	61 05       	cpc	r22, r1
 1ec:	08 94       	sec
 1ee:	08 95       	ret

000001f0 <__fp_zero>:
 1f0:	e8 94       	clt

000001f2 <__fp_szero>:
 1f2:	bb 27       	eor	r27, r27
 1f4:	66 27       	eor	r22, r22
 1f6:	77 27       	eor	r23, r23
 1f8:	cb 01       	movw	r24, r22
 1fa:	97 f9       	bld	r25, 7
 1fc:	08 95       	ret

000001fe <__mulsf3>:
 1fe:	0e 94 12 01 	call	0x224	; 0x224 <__mulsf3x>
 202:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_round>
 206:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_pscA>
 20a:	38 f0       	brcs	.+14     	; 0x21a <__mulsf3+0x1c>
 20c:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_pscB>
 210:	20 f0       	brcs	.+8      	; 0x21a <__mulsf3+0x1c>
 212:	95 23       	and	r25, r21
 214:	11 f0       	breq	.+4      	; 0x21a <__mulsf3+0x1c>
 216:	0c 94 90 01 	jmp	0x320	; 0x320 <__fp_inf>
 21a:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_nan>
 21e:	11 24       	eor	r1, r1
 220:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__fp_szero>

00000224 <__mulsf3x>:
 224:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__fp_split3>
 228:	70 f3       	brcs	.-36     	; 0x206 <__mulsf3+0x8>

0000022a <__mulsf3_pse>:
 22a:	95 9f       	mul	r25, r21
 22c:	c1 f3       	breq	.-16     	; 0x21e <__mulsf3+0x20>
 22e:	95 0f       	add	r25, r21
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	55 1f       	adc	r21, r21
 234:	62 9f       	mul	r22, r18
 236:	f0 01       	movw	r30, r0
 238:	72 9f       	mul	r23, r18
 23a:	bb 27       	eor	r27, r27
 23c:	f0 0d       	add	r31, r0
 23e:	b1 1d       	adc	r27, r1
 240:	63 9f       	mul	r22, r19
 242:	aa 27       	eor	r26, r26
 244:	f0 0d       	add	r31, r0
 246:	b1 1d       	adc	r27, r1
 248:	aa 1f       	adc	r26, r26
 24a:	64 9f       	mul	r22, r20
 24c:	66 27       	eor	r22, r22
 24e:	b0 0d       	add	r27, r0
 250:	a1 1d       	adc	r26, r1
 252:	66 1f       	adc	r22, r22
 254:	82 9f       	mul	r24, r18
 256:	22 27       	eor	r18, r18
 258:	b0 0d       	add	r27, r0
 25a:	a1 1d       	adc	r26, r1
 25c:	62 1f       	adc	r22, r18
 25e:	73 9f       	mul	r23, r19
 260:	b0 0d       	add	r27, r0
 262:	a1 1d       	adc	r26, r1
 264:	62 1f       	adc	r22, r18
 266:	83 9f       	mul	r24, r19
 268:	a0 0d       	add	r26, r0
 26a:	61 1d       	adc	r22, r1
 26c:	22 1f       	adc	r18, r18
 26e:	74 9f       	mul	r23, r20
 270:	33 27       	eor	r19, r19
 272:	a0 0d       	add	r26, r0
 274:	61 1d       	adc	r22, r1
 276:	23 1f       	adc	r18, r19
 278:	84 9f       	mul	r24, r20
 27a:	60 0d       	add	r22, r0
 27c:	21 1d       	adc	r18, r1
 27e:	82 2f       	mov	r24, r18
 280:	76 2f       	mov	r23, r22
 282:	6a 2f       	mov	r22, r26
 284:	11 24       	eor	r1, r1
 286:	9f 57       	subi	r25, 0x7F	; 127
 288:	50 40       	sbci	r21, 0x00	; 0
 28a:	9a f0       	brmi	.+38     	; 0x2b2 <__mulsf3_pse+0x88>
 28c:	f1 f0       	breq	.+60     	; 0x2ca <__mulsf3_pse+0xa0>
 28e:	88 23       	and	r24, r24
 290:	4a f0       	brmi	.+18     	; 0x2a4 <__mulsf3_pse+0x7a>
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	bb 1f       	adc	r27, r27
 298:	66 1f       	adc	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	88 1f       	adc	r24, r24
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	50 40       	sbci	r21, 0x00	; 0
 2a2:	a9 f7       	brne	.-22     	; 0x28e <__mulsf3_pse+0x64>
 2a4:	9e 3f       	cpi	r25, 0xFE	; 254
 2a6:	51 05       	cpc	r21, r1
 2a8:	80 f0       	brcs	.+32     	; 0x2ca <__mulsf3_pse+0xa0>
 2aa:	0c 94 90 01 	jmp	0x320	; 0x320 <__fp_inf>
 2ae:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__fp_szero>
 2b2:	5f 3f       	cpi	r21, 0xFF	; 255
 2b4:	e4 f3       	brlt	.-8      	; 0x2ae <__mulsf3_pse+0x84>
 2b6:	98 3e       	cpi	r25, 0xE8	; 232
 2b8:	d4 f3       	brlt	.-12     	; 0x2ae <__mulsf3_pse+0x84>
 2ba:	86 95       	lsr	r24
 2bc:	77 95       	ror	r23
 2be:	67 95       	ror	r22
 2c0:	b7 95       	ror	r27
 2c2:	f7 95       	ror	r31
 2c4:	e7 95       	ror	r30
 2c6:	9f 5f       	subi	r25, 0xFF	; 255
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <__mulsf3_pse+0x90>
 2ca:	fe 2b       	or	r31, r30
 2cc:	88 0f       	add	r24, r24
 2ce:	91 1d       	adc	r25, r1
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	97 f9       	bld	r25, 7
 2d6:	08 95       	ret

000002d8 <round>:
 2d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <__fp_splitA>
 2dc:	e8 f0       	brcs	.+58     	; 0x318 <round+0x40>
 2de:	9e 37       	cpi	r25, 0x7E	; 126
 2e0:	e8 f0       	brcs	.+58     	; 0x31c <round+0x44>
 2e2:	96 39       	cpi	r25, 0x96	; 150
 2e4:	b8 f4       	brcc	.+46     	; 0x314 <round+0x3c>
 2e6:	9e 38       	cpi	r25, 0x8E	; 142
 2e8:	48 f4       	brcc	.+18     	; 0x2fc <round+0x24>
 2ea:	67 2f       	mov	r22, r23
 2ec:	78 2f       	mov	r23, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	98 5f       	subi	r25, 0xF8	; 248
 2f2:	f9 cf       	rjmp	.-14     	; 0x2e6 <round+0xe>
 2f4:	86 95       	lsr	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	93 95       	inc	r25
 2fc:	95 39       	cpi	r25, 0x95	; 149
 2fe:	d0 f3       	brcs	.-12     	; 0x2f4 <round+0x1c>
 300:	b6 2f       	mov	r27, r22
 302:	b1 70       	andi	r27, 0x01	; 1
 304:	6b 0f       	add	r22, r27
 306:	71 1d       	adc	r23, r1
 308:	81 1d       	adc	r24, r1
 30a:	20 f4       	brcc	.+8      	; 0x314 <round+0x3c>
 30c:	87 95       	ror	r24
 30e:	77 95       	ror	r23
 310:	67 95       	ror	r22
 312:	93 95       	inc	r25
 314:	0c 94 96 01 	jmp	0x32c	; 0x32c <__fp_mintl>
 318:	0c 94 b1 01 	jmp	0x362	; 0x362 <__fp_mpack>
 31c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__fp_szero>

00000320 <__fp_inf>:
 320:	97 f9       	bld	r25, 7
 322:	9f 67       	ori	r25, 0x7F	; 127
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	08 95       	ret

0000032c <__fp_mintl>:
 32c:	88 23       	and	r24, r24
 32e:	71 f4       	brne	.+28     	; 0x34c <__fp_mintl+0x20>
 330:	77 23       	and	r23, r23
 332:	21 f0       	breq	.+8      	; 0x33c <__fp_mintl+0x10>
 334:	98 50       	subi	r25, 0x08	; 8
 336:	87 2b       	or	r24, r23
 338:	76 2f       	mov	r23, r22
 33a:	07 c0       	rjmp	.+14     	; 0x34a <__fp_mintl+0x1e>
 33c:	66 23       	and	r22, r22
 33e:	11 f4       	brne	.+4      	; 0x344 <__fp_mintl+0x18>
 340:	99 27       	eor	r25, r25
 342:	0d c0       	rjmp	.+26     	; 0x35e <__fp_mintl+0x32>
 344:	90 51       	subi	r25, 0x10	; 16
 346:	86 2b       	or	r24, r22
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	2a f0       	brmi	.+10     	; 0x358 <__fp_mintl+0x2c>
 34e:	9a 95       	dec	r25
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	88 1f       	adc	r24, r24
 356:	da f7       	brpl	.-10     	; 0x34e <__fp_mintl+0x22>
 358:	88 0f       	add	r24, r24
 35a:	96 95       	lsr	r25
 35c:	87 95       	ror	r24
 35e:	97 f9       	bld	r25, 7
 360:	08 95       	ret

00000362 <__fp_mpack>:
 362:	9f 3f       	cpi	r25, 0xFF	; 255
 364:	31 f0       	breq	.+12     	; 0x372 <__fp_mpack_finite+0xc>

00000366 <__fp_mpack_finite>:
 366:	91 50       	subi	r25, 0x01	; 1
 368:	20 f4       	brcc	.+8      	; 0x372 <__fp_mpack_finite+0xc>
 36a:	87 95       	ror	r24
 36c:	77 95       	ror	r23
 36e:	67 95       	ror	r22
 370:	b7 95       	ror	r27
 372:	88 0f       	add	r24, r24
 374:	91 1d       	adc	r25, r1
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	97 f9       	bld	r25, 7
 37c:	08 95       	ret

0000037e <__fp_nan>:
 37e:	9f ef       	ldi	r25, 0xFF	; 255
 380:	80 ec       	ldi	r24, 0xC0	; 192
 382:	08 95       	ret

00000384 <__fp_pscA>:
 384:	00 24       	eor	r0, r0
 386:	0a 94       	dec	r0
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	18 06       	cpc	r1, r24
 38e:	09 06       	cpc	r0, r25
 390:	08 95       	ret

00000392 <__fp_pscB>:
 392:	00 24       	eor	r0, r0
 394:	0a 94       	dec	r0
 396:	12 16       	cp	r1, r18
 398:	13 06       	cpc	r1, r19
 39a:	14 06       	cpc	r1, r20
 39c:	05 06       	cpc	r0, r21
 39e:	08 95       	ret

000003a0 <__fp_round>:
 3a0:	09 2e       	mov	r0, r25
 3a2:	03 94       	inc	r0
 3a4:	00 0c       	add	r0, r0
 3a6:	11 f4       	brne	.+4      	; 0x3ac <__fp_round+0xc>
 3a8:	88 23       	and	r24, r24
 3aa:	52 f0       	brmi	.+20     	; 0x3c0 <__fp_round+0x20>
 3ac:	bb 0f       	add	r27, r27
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <__fp_round+0x20>
 3b0:	bf 2b       	or	r27, r31
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <__fp_round+0x18>
 3b4:	60 ff       	sbrs	r22, 0
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__fp_round+0x20>
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8f 4f       	sbci	r24, 0xFF	; 255
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
