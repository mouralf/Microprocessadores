
Teclado_debounce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009fd  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000496  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000461  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027a  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000240b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  78:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <LCD_control>:
}

void delay(){
	unsigned char c;
	for (c = 0; c<150; c++);
}
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	21 f4       	brne	.+8      	; 0x8c <LCD_control+0xc>
  84:	95 b1       	in	r25, 0x05	; 5
  86:	91 60       	ori	r25, 0x01	; 1
  88:	95 b9       	out	0x05, r25	; 5
  8a:	05 c0       	rjmp	.+10     	; 0x96 <LCD_control+0x16>
  8c:	61 11       	cpse	r22, r1
  8e:	03 c0       	rjmp	.+6      	; 0x96 <LCD_control+0x16>
  90:	95 b1       	in	r25, 0x05	; 5
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	95 b9       	out	0x05, r25	; 5
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	9b b1       	in	r25, 0x0b	; 11
  9e:	28 2f       	mov	r18, r24
  a0:	20 7f       	andi	r18, 0xF0	; 240
  a2:	92 2b       	or	r25, r18
  a4:	9b b9       	out	0x0b, r25	; 11
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	92 60       	ori	r25, 0x02	; 2
  aa:	95 b9       	out	0x05, r25	; 5
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	9d 7f       	andi	r25, 0xFD	; 253
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	82 95       	swap	r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	89 2b       	or	r24, r25
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <LCD_init>:
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 6f       	ori	r24, 0xF0	; 240
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 10c:	08 95       	ret

0000010e <enviaInt>:
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	80 5d       	subi	r24, 0xD0	; 208
 112:	0e 94 40 00 	call	0x80	; 0x80 <LCD_control>
 116:	08 95       	ret

00000118 <Keyboard_config>:
#define COLUNA3 PC3	//A3

#define BOUNCE 7
void Keyboard_config(){
	//configura as linhas como saída
	DDRD |= (1 << DDD0); //set PD0 as OUTPUT
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1); //set PD1 as OUTPUT
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	82 60       	ori	r24, 0x02	; 2
 122:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD2); //set PD2 as OUTPUT
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	84 60       	ori	r24, 0x04	; 4
 128:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD3); //set PD3 as OUTPUT
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	8a b9       	out	0x0a, r24	; 10
	
	//configura as colunas como entrada
	DDRC &= ~(1 << DDC1); //set PC1 as INPUT
 130:	87 b1       	in	r24, 0x07	; 7
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC2); //set PC2 as INPUT
 136:	87 b1       	in	r24, 0x07	; 7
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DDC3); //set PC3 as INPUT
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	87 b9       	out	0x07, r24	; 7
	
	//configura as resistências de  pull_up das colunas
	PORTC |= (1 << COLUNA1); //set PC1 as INPUT_PULLUP
 142:	88 b1       	in	r24, 0x08	; 8
 144:	82 60       	ori	r24, 0x02	; 2
 146:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA2); //set PC2 as INPUT_PULLUP
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << COLUNA3); //set PC3 as INPUT_PULLUP
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	88 60       	ori	r24, 0x08	; 8
 152:	88 b9       	out	0x08, r24	; 8
 154:	08 95       	ret

00000156 <delay_ms>:
}


void delay_ms(float tempo_ms){
 156:	cf 93       	push	r28
	/*Função que recebe o tempo em ms como parâmetro e proporciona um delay correspondente ao tempo solicitado*/
	TCCR0A = 0x2;		//modo CTC para o timer 0
 158:	c2 e0       	ldi	r28, 0x02	; 2
 15a:	c4 bd       	out	0x24, r28	; 36
	TCCR0B = 0x5;		//PRESCALER de 1024
 15c:	25 e0       	ldi	r18, 0x05	; 5
 15e:	25 bd       	out	0x25, r18	; 37
	TCNT0 = 0;			//Zera timer
 160:	16 bc       	out	0x26, r1	; 38
	
	//Sendo a frequência do timer de 16 MHz e um prescaler de 1024 temos: 16 MHz/1024 = 15625
	//Desse modo, o tempo do timer é dado por 1/15625 = 64 us
	//Assim, o número de contagens é dado por tempo_ms/64 * 1000
	unsigned char n_contagem = round(tempo_ms/64*1000);		//número de contagens arredondado
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 e8       	ldi	r20, 0x80	; 128
 168:	5c e3       	ldi	r21, 0x3C	; 60
 16a:	0e 94 9d 01 	call	0x33a	; 0x33a <__mulsf3>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	4a e7       	ldi	r20, 0x7A	; 122
 174:	54 e4       	ldi	r21, 0x44	; 68
 176:	0e 94 9d 01 	call	0x33a	; 0x33a <__mulsf3>
 17a:	0e 94 0a 02 	call	0x414	; 0x414 <round>
 17e:	0e 94 45 01 	call	0x28a	; 0x28a <__fixunssfsi>
	OCR0A = n_contagem;										//Valor de comparação 3 contagens (1,66 ms)
 182:	67 bd       	out	0x27, r22	; 39
	
	TIFR0 = (1 << 1);										//limpa flag de comparacao A
 184:	c5 bb       	out	0x15, r28	; 21
	while((TIFR0 & (1 << 1)) == 0);
 186:	a9 9b       	sbis	0x15, 1	; 21
 188:	fe cf       	rjmp	.-4      	; 0x186 <delay_ms+0x30>
}
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <Keyboard_validation>:

void Keyboard_validation(){
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	unsigned char count = 0;
	unsigned char teclaAntes = 0, teclaAtual;
	
	for (int LINHA = 0; LINHA<4; LINHA++){				//percorre todas as linhas
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	5f c0       	rjmp	.+190    	; 0x25e <Keyboard_validation+0xd0>
		PORTD &= ~(1 << LINHA);							//coloca o pino referente à LINHA em LOW
 1a0:	2b b1       	in	r18, 0x0b	; 11
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0c 2e       	mov	r0, r28
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Keyboard_validation+0x20>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Keyboard_validation+0x1c>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	8b b9       	out	0x0b, r24	; 11
		for (int OUTRAS = 0; OUTRAS<4; OUTRAS++){		//percorre novamente todas as linhas
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	10 c0       	rjmp	.+32     	; 0x1de <Keyboard_validation+0x50>
			if(OUTRAS!= LINHA){							//verifica se OUTRAS é diferente de LINHA, se for
 1be:	c2 17       	cp	r28, r18
 1c0:	d3 07       	cpc	r29, r19
 1c2:	59 f0       	breq	.+22     	; 0x1da <Keyboard_validation+0x4c>
				PORTD |= (1<<OUTRAS);					//coloca as outras portas em HIGH
 1c4:	4b b1       	in	r20, 0x0b	; 11
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 2e       	mov	r0, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <Keyboard_validation+0x44>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <Keyboard_validation+0x40>
 1d6:	84 2b       	or	r24, r20
 1d8:	8b b9       	out	0x0b, r24	; 11
	unsigned char count = 0;
	unsigned char teclaAntes = 0, teclaAtual;
	
	for (int LINHA = 0; LINHA<4; LINHA++){				//percorre todas as linhas
		PORTD &= ~(1 << LINHA);							//coloca o pino referente à LINHA em LOW
		for (int OUTRAS = 0; OUTRAS<4; OUTRAS++){		//percorre novamente todas as linhas
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	24 30       	cpi	r18, 0x04	; 4
 1e0:	31 05       	cpc	r19, r1
 1e2:	6c f3       	brlt	.-38     	; 0x1be <Keyboard_validation+0x30>
			if(OUTRAS!= LINHA){							//verifica se OUTRAS é diferente de LINHA, se for
				PORTD |= (1<<OUTRAS);					//coloca as outras portas em HIGH
			}
		}
		delay_ms(10);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	91 e4       	ldi	r25, 0x41	; 65
 1ec:	0e 94 ab 00 	call	0x156	; 0x156 <delay_ms>
		for (int COLUNAS = 1; COLUNAS <=3; COLUNAS++){	//percorre todas as colunas
 1f0:	01 e0       	ldi	r16, 0x01	; 1
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	30 c0       	rjmp	.+96     	; 0x256 <Keyboard_validation+0xc8>
			if(!((PINC & (1 << COLUNAS)) >> COLUNAS)){	//se a coluna em questão for LOW, então significa que foi pressionada
 1f6:	86 b1       	in	r24, 0x06	; 6
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	79 01       	movw	r14, r18
 1fe:	00 2e       	mov	r0, r16
 200:	02 c0       	rjmp	.+4      	; 0x206 <Keyboard_validation+0x78>
 202:	ee 0c       	add	r14, r14
 204:	ff 1c       	adc	r15, r15
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <Keyboard_validation+0x74>
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	8e 21       	and	r24, r14
 20e:	9f 21       	and	r25, r15
 210:	00 2e       	mov	r0, r16
 212:	02 c0       	rjmp	.+4      	; 0x218 <Keyboard_validation+0x8a>
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <Keyboard_validation+0x86>
 21c:	89 2b       	or	r24, r25
 21e:	c9 f4       	brne	.+50     	; 0x252 <Keyboard_validation+0xc4>
				
				//LCD_control(LCD_CLR, CNFG);
			
				enviaInt(LINHA);
 220:	ce 01       	movw	r24, r28
 222:	0e 94 87 00 	call	0x10e	; 0x10e <enviaInt>
				enviaInt(COLUNAS);
 226:	c8 01       	movw	r24, r16
 228:	0e 94 87 00 	call	0x10e	; 0x10e <enviaInt>
				while(!((PINC & (1 << COLUNAS)) >> COLUNAS));	//bounce simples
 22c:	86 b1       	in	r24, 0x06	; 6
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	8e 21       	and	r24, r14
 232:	9f 21       	and	r25, r15
 234:	00 2e       	mov	r0, r16
 236:	02 c0       	rjmp	.+4      	; 0x23c <Keyboard_validation+0xae>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <Keyboard_validation+0xaa>
 240:	89 2b       	or	r24, r25
 242:	a1 f3       	breq	.-24     	; 0x22c <Keyboard_validation+0x9e>
				delay_ms(10);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	91 e4       	ldi	r25, 0x41	; 65
 24c:	0e 94 ab 00 	call	0x156	; 0x156 <delay_ms>
				break;
 250:	05 c0       	rjmp	.+10     	; 0x25c <Keyboard_validation+0xce>
			if(OUTRAS!= LINHA){							//verifica se OUTRAS é diferente de LINHA, se for
				PORTD |= (1<<OUTRAS);					//coloca as outras portas em HIGH
			}
		}
		delay_ms(10);
		for (int COLUNAS = 1; COLUNAS <=3; COLUNAS++){	//percorre todas as colunas
 252:	0f 5f       	subi	r16, 0xFF	; 255
 254:	1f 4f       	sbci	r17, 0xFF	; 255
 256:	04 30       	cpi	r16, 0x04	; 4
 258:	11 05       	cpc	r17, r1
 25a:	6c f2       	brlt	.-102    	; 0x1f6 <Keyboard_validation+0x68>

void Keyboard_validation(){
	unsigned char count = 0;
	unsigned char teclaAntes = 0, teclaAtual;
	
	for (int LINHA = 0; LINHA<4; LINHA++){				//percorre todas as linhas
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	c4 30       	cpi	r28, 0x04	; 4
 260:	d1 05       	cpc	r29, r1
 262:	0c f4       	brge	.+2      	; 0x266 <Keyboard_validation+0xd8>
 264:	9d cf       	rjmp	.-198    	; 0x1a0 <Keyboard_validation+0x12>
		}
		
	}
	delay_lcd();
	
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

00000274 <main>:

int main(void)
{
	//LCD
	DDRB = 0x03;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xF0;
 278:	80 ef       	ldi	r24, 0xF0	; 240
 27a:	8a b9       	out	0x0a, r24	; 10
	delay_lcd();
	
	LCD_init();
 27c:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_init>
	delay_lcd();
	
	
	Keyboard_config();
 280:	0e 94 8c 00 	call	0x118	; 0x118 <Keyboard_config>
	
	//PORTC = 0xFF;
    /* Replace with your application code */
    while (1) 
    {
		Keyboard_validation();
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <Keyboard_validation>
 288:	fd cf       	rjmp	.-6      	; 0x284 <main+0x10>

0000028a <__fixunssfsi>:
 28a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__fp_splitA>
 28e:	88 f0       	brcs	.+34     	; 0x2b2 <__fixunssfsi+0x28>
 290:	9f 57       	subi	r25, 0x7F	; 127
 292:	98 f0       	brcs	.+38     	; 0x2ba <__fixunssfsi+0x30>
 294:	b9 2f       	mov	r27, r25
 296:	99 27       	eor	r25, r25
 298:	b7 51       	subi	r27, 0x17	; 23
 29a:	b0 f0       	brcs	.+44     	; 0x2c8 <__fixunssfsi+0x3e>
 29c:	e1 f0       	breq	.+56     	; 0x2d6 <__fixunssfsi+0x4c>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	1a f0       	brmi	.+6      	; 0x2ae <__fixunssfsi+0x24>
 2a8:	ba 95       	dec	r27
 2aa:	c9 f7       	brne	.-14     	; 0x29e <__fixunssfsi+0x14>
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <__fixunssfsi+0x4c>
 2ae:	b1 30       	cpi	r27, 0x01	; 1
 2b0:	91 f0       	breq	.+36     	; 0x2d6 <__fixunssfsi+0x4c>
 2b2:	0e 94 96 01 	call	0x32c	; 0x32c <__fp_zero>
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	0c 94 96 01 	jmp	0x32c	; 0x32c <__fp_zero>
 2be:	67 2f       	mov	r22, r23
 2c0:	78 2f       	mov	r23, r24
 2c2:	88 27       	eor	r24, r24
 2c4:	b8 5f       	subi	r27, 0xF8	; 248
 2c6:	39 f0       	breq	.+14     	; 0x2d6 <__fixunssfsi+0x4c>
 2c8:	b9 3f       	cpi	r27, 0xF9	; 249
 2ca:	cc f3       	brlt	.-14     	; 0x2be <__fixunssfsi+0x34>
 2cc:	86 95       	lsr	r24
 2ce:	77 95       	ror	r23
 2d0:	67 95       	ror	r22
 2d2:	b3 95       	inc	r27
 2d4:	d9 f7       	brne	.-10     	; 0x2cc <__fixunssfsi+0x42>
 2d6:	3e f4       	brtc	.+14     	; 0x2e6 <__fixunssfsi+0x5c>
 2d8:	90 95       	com	r25
 2da:	80 95       	com	r24
 2dc:	70 95       	com	r23
 2de:	61 95       	neg	r22
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	08 95       	ret

000002e8 <__fp_split3>:
 2e8:	57 fd       	sbrc	r21, 7
 2ea:	90 58       	subi	r25, 0x80	; 128
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	59 f0       	breq	.+22     	; 0x308 <__fp_splitA+0x10>
 2f2:	5f 3f       	cpi	r21, 0xFF	; 255
 2f4:	71 f0       	breq	.+28     	; 0x312 <__fp_splitA+0x1a>
 2f6:	47 95       	ror	r20

000002f8 <__fp_splitA>:
 2f8:	88 0f       	add	r24, r24
 2fa:	97 fb       	bst	r25, 7
 2fc:	99 1f       	adc	r25, r25
 2fe:	61 f0       	breq	.+24     	; 0x318 <__fp_splitA+0x20>
 300:	9f 3f       	cpi	r25, 0xFF	; 255
 302:	79 f0       	breq	.+30     	; 0x322 <__fp_splitA+0x2a>
 304:	87 95       	ror	r24
 306:	08 95       	ret
 308:	12 16       	cp	r1, r18
 30a:	13 06       	cpc	r1, r19
 30c:	14 06       	cpc	r1, r20
 30e:	55 1f       	adc	r21, r21
 310:	f2 cf       	rjmp	.-28     	; 0x2f6 <__fp_split3+0xe>
 312:	46 95       	lsr	r20
 314:	f1 df       	rcall	.-30     	; 0x2f8 <__fp_splitA>
 316:	08 c0       	rjmp	.+16     	; 0x328 <__fp_splitA+0x30>
 318:	16 16       	cp	r1, r22
 31a:	17 06       	cpc	r1, r23
 31c:	18 06       	cpc	r1, r24
 31e:	99 1f       	adc	r25, r25
 320:	f1 cf       	rjmp	.-30     	; 0x304 <__fp_splitA+0xc>
 322:	86 95       	lsr	r24
 324:	71 05       	cpc	r23, r1
 326:	61 05       	cpc	r22, r1
 328:	08 94       	sec
 32a:	08 95       	ret

0000032c <__fp_zero>:
 32c:	e8 94       	clt

0000032e <__fp_szero>:
 32e:	bb 27       	eor	r27, r27
 330:	66 27       	eor	r22, r22
 332:	77 27       	eor	r23, r23
 334:	cb 01       	movw	r24, r22
 336:	97 f9       	bld	r25, 7
 338:	08 95       	ret

0000033a <__mulsf3>:
 33a:	0e 94 b0 01 	call	0x360	; 0x360 <__mulsf3x>
 33e:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_round>
 342:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_pscA>
 346:	38 f0       	brcs	.+14     	; 0x356 <__mulsf3+0x1c>
 348:	0e 94 67 02 	call	0x4ce	; 0x4ce <__fp_pscB>
 34c:	20 f0       	brcs	.+8      	; 0x356 <__mulsf3+0x1c>
 34e:	95 23       	and	r25, r21
 350:	11 f0       	breq	.+4      	; 0x356 <__mulsf3+0x1c>
 352:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__fp_inf>
 356:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_nan>
 35a:	11 24       	eor	r1, r1
 35c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_szero>

00000360 <__mulsf3x>:
 360:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fp_split3>
 364:	70 f3       	brcs	.-36     	; 0x342 <__mulsf3+0x8>

00000366 <__mulsf3_pse>:
 366:	95 9f       	mul	r25, r21
 368:	c1 f3       	breq	.-16     	; 0x35a <__mulsf3+0x20>
 36a:	95 0f       	add	r25, r21
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	55 1f       	adc	r21, r21
 370:	62 9f       	mul	r22, r18
 372:	f0 01       	movw	r30, r0
 374:	72 9f       	mul	r23, r18
 376:	bb 27       	eor	r27, r27
 378:	f0 0d       	add	r31, r0
 37a:	b1 1d       	adc	r27, r1
 37c:	63 9f       	mul	r22, r19
 37e:	aa 27       	eor	r26, r26
 380:	f0 0d       	add	r31, r0
 382:	b1 1d       	adc	r27, r1
 384:	aa 1f       	adc	r26, r26
 386:	64 9f       	mul	r22, r20
 388:	66 27       	eor	r22, r22
 38a:	b0 0d       	add	r27, r0
 38c:	a1 1d       	adc	r26, r1
 38e:	66 1f       	adc	r22, r22
 390:	82 9f       	mul	r24, r18
 392:	22 27       	eor	r18, r18
 394:	b0 0d       	add	r27, r0
 396:	a1 1d       	adc	r26, r1
 398:	62 1f       	adc	r22, r18
 39a:	73 9f       	mul	r23, r19
 39c:	b0 0d       	add	r27, r0
 39e:	a1 1d       	adc	r26, r1
 3a0:	62 1f       	adc	r22, r18
 3a2:	83 9f       	mul	r24, r19
 3a4:	a0 0d       	add	r26, r0
 3a6:	61 1d       	adc	r22, r1
 3a8:	22 1f       	adc	r18, r18
 3aa:	74 9f       	mul	r23, r20
 3ac:	33 27       	eor	r19, r19
 3ae:	a0 0d       	add	r26, r0
 3b0:	61 1d       	adc	r22, r1
 3b2:	23 1f       	adc	r18, r19
 3b4:	84 9f       	mul	r24, r20
 3b6:	60 0d       	add	r22, r0
 3b8:	21 1d       	adc	r18, r1
 3ba:	82 2f       	mov	r24, r18
 3bc:	76 2f       	mov	r23, r22
 3be:	6a 2f       	mov	r22, r26
 3c0:	11 24       	eor	r1, r1
 3c2:	9f 57       	subi	r25, 0x7F	; 127
 3c4:	50 40       	sbci	r21, 0x00	; 0
 3c6:	9a f0       	brmi	.+38     	; 0x3ee <__mulsf3_pse+0x88>
 3c8:	f1 f0       	breq	.+60     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3ca:	88 23       	and	r24, r24
 3cc:	4a f0       	brmi	.+18     	; 0x3e0 <__mulsf3_pse+0x7a>
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	bb 1f       	adc	r27, r27
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	50 40       	sbci	r21, 0x00	; 0
 3de:	a9 f7       	brne	.-22     	; 0x3ca <__mulsf3_pse+0x64>
 3e0:	9e 3f       	cpi	r25, 0xFE	; 254
 3e2:	51 05       	cpc	r21, r1
 3e4:	80 f0       	brcs	.+32     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e6:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__fp_inf>
 3ea:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_szero>
 3ee:	5f 3f       	cpi	r21, 0xFF	; 255
 3f0:	e4 f3       	brlt	.-8      	; 0x3ea <__mulsf3_pse+0x84>
 3f2:	98 3e       	cpi	r25, 0xE8	; 232
 3f4:	d4 f3       	brlt	.-12     	; 0x3ea <__mulsf3_pse+0x84>
 3f6:	86 95       	lsr	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	e7 95       	ror	r30
 402:	9f 5f       	subi	r25, 0xFF	; 255
 404:	c1 f7       	brne	.-16     	; 0x3f6 <__mulsf3_pse+0x90>
 406:	fe 2b       	or	r31, r30
 408:	88 0f       	add	r24, r24
 40a:	91 1d       	adc	r25, r1
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <round>:
 414:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__fp_splitA>
 418:	e8 f0       	brcs	.+58     	; 0x454 <round+0x40>
 41a:	9e 37       	cpi	r25, 0x7E	; 126
 41c:	e8 f0       	brcs	.+58     	; 0x458 <round+0x44>
 41e:	96 39       	cpi	r25, 0x96	; 150
 420:	b8 f4       	brcc	.+46     	; 0x450 <round+0x3c>
 422:	9e 38       	cpi	r25, 0x8E	; 142
 424:	48 f4       	brcc	.+18     	; 0x438 <round+0x24>
 426:	67 2f       	mov	r22, r23
 428:	78 2f       	mov	r23, r24
 42a:	88 27       	eor	r24, r24
 42c:	98 5f       	subi	r25, 0xF8	; 248
 42e:	f9 cf       	rjmp	.-14     	; 0x422 <round+0xe>
 430:	86 95       	lsr	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	93 95       	inc	r25
 438:	95 39       	cpi	r25, 0x95	; 149
 43a:	d0 f3       	brcs	.-12     	; 0x430 <round+0x1c>
 43c:	b6 2f       	mov	r27, r22
 43e:	b1 70       	andi	r27, 0x01	; 1
 440:	6b 0f       	add	r22, r27
 442:	71 1d       	adc	r23, r1
 444:	81 1d       	adc	r24, r1
 446:	20 f4       	brcc	.+8      	; 0x450 <round+0x3c>
 448:	87 95       	ror	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	93 95       	inc	r25
 450:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_mintl>
 454:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_mpack>
 458:	0c 94 97 01 	jmp	0x32e	; 0x32e <__fp_szero>

0000045c <__fp_inf>:
 45c:	97 f9       	bld	r25, 7
 45e:	9f 67       	ori	r25, 0x7F	; 127
 460:	80 e8       	ldi	r24, 0x80	; 128
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	08 95       	ret

00000468 <__fp_mintl>:
 468:	88 23       	and	r24, r24
 46a:	71 f4       	brne	.+28     	; 0x488 <__fp_mintl+0x20>
 46c:	77 23       	and	r23, r23
 46e:	21 f0       	breq	.+8      	; 0x478 <__fp_mintl+0x10>
 470:	98 50       	subi	r25, 0x08	; 8
 472:	87 2b       	or	r24, r23
 474:	76 2f       	mov	r23, r22
 476:	07 c0       	rjmp	.+14     	; 0x486 <__fp_mintl+0x1e>
 478:	66 23       	and	r22, r22
 47a:	11 f4       	brne	.+4      	; 0x480 <__fp_mintl+0x18>
 47c:	99 27       	eor	r25, r25
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__fp_mintl+0x32>
 480:	90 51       	subi	r25, 0x10	; 16
 482:	86 2b       	or	r24, r22
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	2a f0       	brmi	.+10     	; 0x494 <__fp_mintl+0x2c>
 48a:	9a 95       	dec	r25
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	da f7       	brpl	.-10     	; 0x48a <__fp_mintl+0x22>
 494:	88 0f       	add	r24, r24
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	97 f9       	bld	r25, 7
 49c:	08 95       	ret

0000049e <__fp_mpack>:
 49e:	9f 3f       	cpi	r25, 0xFF	; 255
 4a0:	31 f0       	breq	.+12     	; 0x4ae <__fp_mpack_finite+0xc>

000004a2 <__fp_mpack_finite>:
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	20 f4       	brcc	.+8      	; 0x4ae <__fp_mpack_finite+0xc>
 4a6:	87 95       	ror	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	88 0f       	add	r24, r24
 4b0:	91 1d       	adc	r25, r1
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	97 f9       	bld	r25, 7
 4b8:	08 95       	ret

000004ba <__fp_nan>:
 4ba:	9f ef       	ldi	r25, 0xFF	; 255
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	08 95       	ret

000004c0 <__fp_pscA>:
 4c0:	00 24       	eor	r0, r0
 4c2:	0a 94       	dec	r0
 4c4:	16 16       	cp	r1, r22
 4c6:	17 06       	cpc	r1, r23
 4c8:	18 06       	cpc	r1, r24
 4ca:	09 06       	cpc	r0, r25
 4cc:	08 95       	ret

000004ce <__fp_pscB>:
 4ce:	00 24       	eor	r0, r0
 4d0:	0a 94       	dec	r0
 4d2:	12 16       	cp	r1, r18
 4d4:	13 06       	cpc	r1, r19
 4d6:	14 06       	cpc	r1, r20
 4d8:	05 06       	cpc	r0, r21
 4da:	08 95       	ret

000004dc <__fp_round>:
 4dc:	09 2e       	mov	r0, r25
 4de:	03 94       	inc	r0
 4e0:	00 0c       	add	r0, r0
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__fp_round+0xc>
 4e4:	88 23       	and	r24, r24
 4e6:	52 f0       	brmi	.+20     	; 0x4fc <__fp_round+0x20>
 4e8:	bb 0f       	add	r27, r27
 4ea:	40 f4       	brcc	.+16     	; 0x4fc <__fp_round+0x20>
 4ec:	bf 2b       	or	r27, r31
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__fp_round+0x18>
 4f0:	60 ff       	sbrs	r22, 0
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <__fp_round+0x20>
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	08 95       	ret

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
